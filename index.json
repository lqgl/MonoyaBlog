[{"categories":["DevOps"],"content":"Git代码状态转换图 其中： 未被Git跟踪的状态为unstage状态； 已被Git跟踪的状态为stage状态（stage：阶段），因此包括staging状态和staged状态。 untrack files：是指尚未被git所管理的文件； changed but not updated：是指文件被git管理，并且发生了改变，但改动还没被git管理； 这两种状态，都可以看成是改动还没被git管理的状态，我们这里称unstage状态。 staging是commit和未管理之间的一个状态，也有别名叫index状态，也就是git已经管理了这些改动，但是还没完成提交。 changes to be committed是指进入staged状态的文件。 .gitignore中的文件，不会出现在以上三个状态中。 注： 这个图也解释了为啥从远端库拉代码，不需要add、commit。 代码一旦修改，就会成为未被git库跟踪的状态。需要add、commit。 ","date":"2022-09-29","objectID":"/git-and-operations/:1:0","tags":["Git"],"title":"Git 基本知识与常用指令","uri":"/git-and-operations/"},{"categories":["DevOps"],"content":"大白话Git Git 管理代码，保证代码版本迭代连续性，即：向A分支merge或者push代码时，A分支代码必须是当前代码的上一个版本，不然会产生冲突。 （换句话说：Git 确保当前的本地的代码为最新） Git有修改就有提交，就有新的代码版本，git管理维护的是修改。 Git分支存储的是代码副本。 push: 实际上就是将本地分支合并到远端库分支；pull:实际就是将远端分支合并到本地分支。 ","date":"2022-09-29","objectID":"/git-and-operations/:2:0","tags":["Git"],"title":"Git 基本知识与常用指令","uri":"/git-and-operations/"},{"categories":["DevOps"],"content":"Git 本地常用操作指令 创建git库 git init #在当前目录中生成一个.git 目录（含有.git目录的目录即是git仓库） 注册Git用户(用户信息配置) —\u003e用于在团队合作开发中，表明代码作者。 git config --global user.name XXX # 用户名 git config --global user.email XXX # 用户邮箱 git config --list # 查看用户信息 注：加 –global,表示全局设置。 向git库添加修改 git add [path］ # 会把对应目录或文件，添加到stage状态 git add . # 会把当前所有的untrack files和changed but not updated添加到stage状态 实际上是为修改内容添加index索引。 向版本库提交修改 git commit –m \"XXXX\" # 提交修改,添加注释,文件描述 注：git 提示： 未有 add 红色字体，未有commit绿色字体，已提交则worktree是干净的 查看当前代码库的状态 git status 查看版本信息 —\u003e实际是查看修改提交信息 git log git log --graph #以图形化（节点）展示当前git库的提交信息。 查看指定版本信息 git show sdjf974654dd…. #(show后面为每次提交系统自动生成的一串哈希值) git show sdji97 #一般只使用版本号的前几个字符即可 撤销修改 撤销整体修改 git reset --hard #回到原来编辑的地方,改动会丢失。（同样适用于团队对于其他人的修改恢复） git reset --hard sdv143kvf... #可回到指定的版本#(hard后面为每次提交系统自动生成的一串哈希值) git reset [path] # 会改变path指定的文件或目录的stage状态，到非stage状态。 git reset # 会将所有stage的文件状态，都改变成非stage状态。 撤销某次修改 回退1个change的写法就是: git reset HEAD^ git reset --soft HEAD~1 # 删除最近的提交，保留你已经完成的工作 git reset --hard HEAD~1 # 删除最近的提交，销毁你已经完成的工作 2个为HEAD^^， 3个为HEAD~3，以此类推。 向远端库推送修改（提交修改） git push origin 分支名 暂存修改 git stash # 可以把当前的改动（stage和unstage，但不包括untrack的文件）暂存。 git stash list # 查看暂存的改动 git stash apply # 重新取出暂存的改动。但apply之前要保证worktree是干净的。 ","date":"2022-09-29","objectID":"/git-and-operations/:3:0","tags":["Git"],"title":"Git 基本知识与常用指令","uri":"/git-and-operations/"},{"categories":["DevOps"],"content":"Git 团队开发常用操作指令 获取远端库项目 git clone/pull xxx.git 团队开发的基本流程（多分支合并一个分支） git add . #添加改动的文件 git commit #（提交至本地） git pull --rebase #（将服务器项目与本地项目合并） git push #（将本地项目上传至远端库） 在提交前要git pull –rebase 一下，确保当前的本地的代码为最新。 更新 fork 的仓库 git remote add upstream xxx.git # 添加远程，称其为 \"上游\" git fetch upstream # 把该远程的所有分支取到远程跟踪分支中去 git checkout master # 确保你在你的主分支上 git rebase upstream/master # 重写你的主分支，这样任何不在上游/主分支中的提交都会在其他分支的顶部重放。 git pull upstream xx # 把本地的xx分支与被fork仓库xx分支同步 git push upstream xx:xxx # 推送本地xx分支到被fork仓库的xxx分支上 tag 的创建与删除 创建 tag # To create a tag on your current branch, run this: git tag \u003ctagname\u003e # 在当前分支上创建一个标签 # If you want to include a description with your tag, add -a to create an annotated tag: git tag \u003ctagname\u003e -a # 如果你想在标签中加入描述，可以添加 -a 来创建一个带注释的标签。 # This will create a local tag with the current state of the branch you are on. When pushing to your remote repo, tags are NOT included by default. You will need to explicitly say that you want to push your tags to your remote repo: git push origin --tags # 这将创建一个本地标签，包含你所在的分支的当前状态。当推送到远程版本时，默认不包括标签。你需要明确地说，你想把你的标签推送到你的远程 repo # Or if you just want to push a single tag: git push origin \u003ctag\u003e # 或者如果你只想推送一个标签 eg: git tag v1.0.0 git push origin v1.0.0 删除 tag # use the --delete option (or -d if your git version is older than 1.8.0): git push --delete origin tagname # delete the local tag, use: git tag --delete tagname # 删除本地标签 eg: git git push --delete origin v1.0.0 ","date":"2022-09-29","objectID":"/git-and-operations/:4:0","tags":["Git"],"title":"Git 基本知识与常用指令","uri":"/git-and-operations/"},{"categories":["DevOps"],"content":"Git 分支管理 建立分支 git branch AAA #建立分支AAA 分支切换 git checkout AAA #从当前分支切换到AAA分支 (若AAA分支不存在，则自动新建) 将分支与主枝master合并 git checkout master #（首先切换回主枝） git merge AAA #（将分支AAA与主枝合并） 注：git merge：默认情况下，Git执行\"快进式合并\"（fast-farward merge），会直接将Master分支指向Develop分支。 使用–no-ff参数后，会执行正常合并，在Master分支上生成一个新节点。为了保证版本演进的清晰（保持提交曲线为直线），建议采用这种方法。 当前分支查看 git branch #默认有master（也称为主枝） git branch -r #查看远端库分支 git branch –a #查看当前所有分支（包括本地分支和远端库分支） 删除分支 git branch –d AAA #删除分支AAA git push origin --delete AAA #删除远程分支AAA 切下远端库A分支到本地库A分支 git checkout -b A origin/A # （若本地A分支不存在，则自动新建） 注：上面只是一些基本的操作命令，更多的命令可通过帮助文档查询。 帮助文档的使用： man git-\u003c需查询的指令\u003e #（git后面有“-”） 如commit的查询为 man git-commit ","date":"2022-09-29","objectID":"/git-and-operations/:5:0","tags":["Git"],"title":"Git 基本知识与常用指令","uri":"/git-and-operations/"},{"categories":["DevOps"],"content":"本地代码上传GitHub GitHub上建立远端仓库，复制下载链接。 本地指定目录下，GitBash 粘贴远端仓库下载链接拉取远端仓库代码。 复制本地需要提交的代码到远端仓库目录。 Git add、commit、push 提交本地代码至Github远端仓库。 ","date":"2022-09-29","objectID":"/git-and-operations/:6:0","tags":["Git"],"title":"Git 基本知识与常用指令","uri":"/git-and-operations/"},{"categories":["DevOps"],"content":"参考文档 Git 基本知识与常用指令 ","date":"2022-09-29","objectID":"/git-and-operations/:7:0","tags":["Git"],"title":"Git 基本知识与常用指令","uri":"/git-and-operations/"},{"categories":["DevOps"],"content":"Docker 安装与卸载 ","date":"2022-09-29","objectID":"/docker-usage/:1:0","tags":["Docker"],"title":"Docker 安装卸载与镜像容器管理","uri":"/docker-usage/"},{"categories":["DevOps"],"content":"安装与验证 更新数据源： sudo apt update 安装一些必备软件包，让 apt 通过 HTTPS 使用软件包。 sudo apt install apt-transport-https ca-certificates curl software-properties-common 将官方 Docker 版本库的 GPG 密钥添加到系统中： curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - 将 Docker 版本库添加到APT源： sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable\" 用新添加的 Docker 软件包来进行升级更新。 sudo apt update 确保要从 Docker 版本库，而不是默认的 Ubuntu 版本库进行安装： apt-cache policy docker-ce # 执行后可以看到 docker-ce 来自 Docker 官方版本库。 安装 Docker sudo apt install docker-ce 检查 Docker 是否正在运行： sudo systemctl status docker ","date":"2022-09-29","objectID":"/docker-usage/:1:1","tags":["Docker"],"title":"Docker 安装卸载与镜像容器管理","uri":"/docker-usage/"},{"categories":["DevOps"],"content":"卸载 Docker 在卸载 Docker 之前，你最好移除所有的容器，镜像，卷和网络。 运行下面的命令停止所有正在运行的容器，并且移除所有的 docker 对象 docker container stop $(docker container ls -aq) docker system prune -a --volumes 接下来你可以使用 apt 命令来卸载 Docker sudo apt purge docker-ce sudo apt autoremove ","date":"2022-09-29","objectID":"/docker-usage/:1:2","tags":["Docker"],"title":"Docker 安装卸载与镜像容器管理","uri":"/docker-usage/"},{"categories":["DevOps"],"content":"Docker 删除容器和镜像 ","date":"2022-09-29","objectID":"/docker-usage/:2:0","tags":["Docker"],"title":"Docker 安装卸载与镜像容器管理","uri":"/docker-usage/"},{"categories":["DevOps"],"content":"管理容器 docker ps -aq # 列出所有容器 ID docker ps -a # 查看所有运行或者不运行容器 docker stop $(docker ps -a -q) # 停止所有的 container（容器），这样才能够删除其中的 images docker rm $(docker ps -a -q) # 如果想要删除所有 container（容器）的话再加一个指令 docker container prune # 删除所有停止的容器 docker stop Name或者ID # 停止一个容器 docker start Name或者ID # 启动一个容器 docker kill Name或者ID # 杀死一个容器 docker restart name或者ID # 重启一个容器 ","date":"2022-09-29","objectID":"/docker-usage/:2:1","tags":["Docker"],"title":"Docker 安装卸载与镜像容器管理","uri":"/docker-usage/"},{"categories":["DevOps"],"content":"管理镜像 docker images # 查看当前有些什么 images docker rmi imageid # 删除 images（镜像），通过 image 的 id 来指定删除谁 docker rmi $(docker images | grep \"^\u003cnone\u003e\" | awk \"{print $3}\") # 想要删除 untagged images，也就是那些 id 为的 image 的话可以用 docker rmi $(docker images -q) # 要删除全部 image（镜像）的话 docker rmi -f $(docker images -q) # 强制删除全部 image 的话 ","date":"2022-09-29","objectID":"/docker-usage/:2:2","tags":["Docker"],"title":"Docker 安装卸载与镜像容器管理","uri":"/docker-usage/"},{"categories":null,"content":"个人介绍 一个已经工作一年多的后端程序员，工作中主要使用 Go 和 Python。 个人邮箱：liuguang@duck.com Github: https://github.com/lqgl BiliBili: https://space.bilibili.com/289855487 ","date":"2022-09-27","objectID":"/about/:0:0","tags":null,"title":"关于自己","uri":"/about/"},{"categories":["Go Blog"],"content":"英文原文：When To Use Generics ","date":"2022-09-19","objectID":"/go-when-generics/:0:0","tags":["Go"],"title":"When Generics","uri":"/go-when-generics/"},{"categories":["Go Blog"],"content":"介绍 Go 1.18版本增加了一个主要的新语言特性:支持泛型编程。在本文中，我不打算描述泛型是什么，也不打算描述如何使用泛型。 本文讨论的是在Go代码中何时使用泛型，何时不使用泛型。 需要明确的是，我将提供一般的指导方针，而不是硬性规定。用你自己的判断。但如果您不确定，我建议使用这里讨论的指导方针。 ","date":"2022-09-19","objectID":"/go-when-generics/:1:0","tags":["Go"],"title":"When Generics","uri":"/go-when-generics/"},{"categories":["Go Blog"],"content":"编写代码 让我们从编写Go程序的一般指导原则开始:通过编写代码来编写Go程序，而不是通过定义类型。 谈到泛型，如果您通过定义类型参数约束开始编写程序，那么您可能走错了路。从编写函数开始。 很容易在以后添加类型参数，因为它们显然是有用的。 ","date":"2022-09-19","objectID":"/go-when-generics/:2:0","tags":["Go"],"title":"When Generics","uri":"/go-when-generics/"},{"categories":["Go Blog"],"content":"什么时候类型参数有用? 也就是说，让我们看看类型参数在哪些情况下是有用的。 ","date":"2022-09-19","objectID":"/go-when-generics/:3:0","tags":["Go"],"title":"When Generics","uri":"/go-when-generics/"},{"categories":["Go Blog"],"content":"当使用语言定义的容器类型时 一种情况是编写操作语言定义的特殊容器类型(切片、映射和通道)的函数。 如果一个函数具有这些类型的形参，并且函数代码没有对元素类型做任何特定的假设，那么使用类型形参可能会很有用。 例如，下面是一个函数，它返回任意类型映射中所有键的切片: // MapKeys returns a slice of all the keys in m. // The keys are not returned in any particular order. func MapKeys[Key comparable, Val any](m map[Key]Val) []Key { s := make([]Key, 0, len(m)) for k := range m { s = append(s, k) } return s } 这段代码没有对map键类型做任何假设，也根本不使用map值类型。它适用于任何map类型。这使得它成为使用类型参数的一个很好的候选者。 这类函数的类型参数的替代方案通常是使用反射，但这是一种更笨拙的编程模型，在构建时不进行静态类型检查，并且在运行时通常更慢。 ","date":"2022-09-19","objectID":"/go-when-generics/:3:1","tags":["Go"],"title":"When Generics","uri":"/go-when-generics/"},{"categories":["Go Blog"],"content":"通用数据结构 类型参数可能有用的另一种情况是用于通用数据结构。通用数据结构类似于切片或映射，但不是内置在语言中，如链表或二叉树。 今天，需要这种数据结构的程序通常会做两件事中的一件:用特定的元素类型编写它们，或者使用接口类型。 用类型参数替换特定的元素类型可以生成更通用的数据结构，可以在程序的其他部分或由其他程序使用。 用类型参数替换接口类型可以更有效地存储数据，节省内存资源;它还允许代码避免类型断言，并在构建时进行完全的类型检查。 例如，下面是使用类型参数的二叉树数据结构的一部分: // Tree is a binary tree. type Tree[T any] struct { cmp func(T, T) int root *node[T] } // A node in a Tree. type node[T any] struct { left, right *node[T] val T } // find returns a pointer to the node containing val, // or, if val is not present, a pointer to where it // would be placed if added. func (bt *Tree[T]) find(val T) **node[T] { pl := \u0026bt.root for *pl != nil { switch cmp := bt.cmp(val, (*pl).val); { case cmp \u003c 0: pl = \u0026(*pl).left case cmp \u003e 0: pl = \u0026(*pl).right default: return pl } } return pl } // Insert inserts val into bt if not already there, // and reports whether it was inserted. func (bt *Tree[T]) Insert(val T) bool { pl := bt.find(val) if *pl != nil { return false } *pl = \u0026node[T]{val: val} return true } 树中的每个节点都包含类型参数T的值。当使用特定的类型参数实例化树时，该类型的值将直接存储在节点中。它们不会被存储为接口类型。 这是对类型参数的合理使用，因为Tree数据结构(包括方法中的代码)在很大程度上独立于元素类型T。 Tree数据结构确实需要知道如何比较元素类型T的值;它使用了一个传入的比较函数。 您可以在find方法的第四行看到这一点，在调用bt.cmp中。除此之外，类型参数根本不重要。 ","date":"2022-09-19","objectID":"/go-when-generics/:3:2","tags":["Go"],"title":"When Generics","uri":"/go-when-generics/"},{"categories":["Go Blog"],"content":"对于类型参数来说，宁可选择函数，也不选择方法，这一点都不重要。 Tree示例说明了另一个通用准则:当您需要比较函数之类的东西时，首选函数而不是方法。 我们可以定义Tree类型，这样元素类型就需要有一个 Compare 或 Less 方法。 这可以通过编写一个需要该方法的约束来实现，这意味着任何用于实例化Tree类型的类型参数都需要有该方法。 结果是，任何想要将Tree与简单数据类型(如int)一起使用的人都必须定义自己的整数类型并编写自己的比较方法。 如果我们定义Tree来接受一个比较函数，如上面所示的代码，那么很容易传入所需的函数。编写比较函数和编写方法一样容易。 如果Tree元素类型碰巧已经有一个Compare方法，那么我们可以简单地使用ElementType这样的方法表达式。Compare作为比较函数。 换句话说，将方法转换为函数要比向类型添加方法简单得多。因此，对于通用的数据类型，最好使用函数，而不是编写需要方法的约束。 ","date":"2022-09-19","objectID":"/go-when-generics/:3:3","tags":["Go"],"title":"When Generics","uri":"/go-when-generics/"},{"categories":["Go Blog"],"content":"实现一个通用方法 类型参数有用的另一种情况是，不同的类型需要实现一些公共方法，而不同类型的实现看起来都一样。 例如，考虑标准库的sort.Interface。它要求一个类型实现三个方法:Len、Swap和Less。 下面是实现排序的泛型类型SliceFn的一个示例。用于任何片类型的接口: // SliceFn implements sort.Interface for a slice of T. type SliceFn[T any] struct { s []T less func(T, T) bool } func (s SliceFn[T]) Len() int { return len(s.s) } func (s SliceFn[T]) Swap(i, j int) { s.s[i], s.s[j] = s.s[j], s.s[i] } func (s SliceFn[T]) Less(i, j int) bool { return s.less(s.s[i], s.s[j]) } 对于任何切片类型，Len和Swap方法完全相同。Less方法需要进行比较，这是名称SliceFn的Fn部分。与前面的树示例一样，我们将在创建SliceFn时传入一个函数。 下面是如何使用SliceFn使用比较函数对任何切片进行排序: // SortFn sorts s in place using a comparison function. func SortFn[T any](s []T, less func(T, T) bool) { sort.Sort(SliceFn[T]{s, less}) } 这类似于标准库函数sort.Slice，但是比较函数是使用值而不是slice索引来编写的。 对这类代码使用类型参数是合适的，因为所有切片类型的方法看起来完全相同。 (我应该提到的是，Go 1.19而不是1.18很可能包含一个泛型函数，使用比较函数对切片进行排序，而该泛型函数很可能不会使用sort.interface。 见建议#47619。 但是，即使这个特定的例子很可能没有用，但总的观点仍然是正确的:当您需要实现对所有相关类型看起来相同的方法时，使用类型参数是合理的。) ","date":"2022-09-19","objectID":"/go-when-generics/:3:4","tags":["Go"],"title":"When Generics","uri":"/go-when-generics/"},{"categories":["Go Blog"],"content":"什么情况下类型参数没有用? 现在让我们讨论问题的另一面:什么时候不使用类型参数。 ","date":"2022-09-19","objectID":"/go-when-generics/:4:0","tags":["Go"],"title":"When Generics","uri":"/go-when-generics/"},{"categories":["Go Blog"],"content":"不要用类型参数替换接口类型 众所周知，Go有接口类型。接口类型允许一种泛型编程。 例如，广泛使用的io.Reader接口提供了一种通用机制，用于从包含信息(例如文件)或产生信息(例如随机数生成器)的任何值读取数据。 如果对某种类型的值所需要做的只是调用该值的方法，那么请使用接口类型，而不是类型参数。 io.Reader易于阅读，效率高，效果好。不需要使用类型参数通过调用read方法从值中读取数据。 例如，可能很容易将这里的第一个函数签名(只使用接口类型)更改为第二个版本(使用类型参数)。 func ReadSome(r io.Reader) ([]byte, error) func ReadSome[T io.Reader](r T) ([]byte, error) 不要做那种改变。省略type参数可以使函数更容易编写和读取，并且执行时间可能是相同的。 最后一点值得强调。虽然可以通过几种不同的方式实现泛型，而且实现会随着时间的推移而改变和改进，但在Go 1.18中使用的实现在很多情况下会将类型为类型参数的值与类型为接口类型的值处理得非常相似。 这意味着使用类型参数通常不会比使用接口类型快。因此，不要仅仅为了速度而从接口类型更改到类型参数，因为它可能不会运行得更快。 ","date":"2022-09-19","objectID":"/go-when-generics/:4:1","tags":["Go"],"title":"When Generics","uri":"/go-when-generics/"},{"categories":["Go Blog"],"content":"如果方法实现不同，不要使用类型参数 在决定是使用类型参数还是使用接口类型时，请考虑方法的实现。前面我们说过，如果一个方法的实现对于所有类型都是相同的，那么就使用类型参数。 相反，如果每个类型的实现都不同，那么就使用接口类型并编写不同的方法实现，而不要使用类型参数。 例如，从文件中读取的实现与从随机数生成器中读取的实现完全不同。这意味着我们应该编写两个不同的Read方法，并使用io.Reader这样的接口类型。 ","date":"2022-09-19","objectID":"/go-when-generics/:4:2","tags":["Go"],"title":"When Generics","uri":"/go-when-generics/"},{"categories":["Go Blog"],"content":"在适当的地方使用反射 Go有run time reflection。反射允许一种泛型编程，因为它允许您编写适用于任何类型的代码。 如果某些操作必须支持甚至没有方法的类型(因此接口类型没有帮助)，并且如果每个类型的操作不同(因此类型参数不合适)，则使用反射。 一个例子是encoding/json包。 我们不希望要求编码的每个类型都有MarshalJSON方法，因此不能使用接口类型。 但是对接口类型进行编码与对结构类型进行编码完全不同，因此不应该使用类型参数。 相反，这个包使用反射。代码并不简单，但它可以工作。详细信息请参见源代码。 ","date":"2022-09-19","objectID":"/go-when-generics/:4:3","tags":["Go"],"title":"When Generics","uri":"/go-when-generics/"},{"categories":["Go Blog"],"content":"一个简单的指南 最后，关于何时使用泛型的讨论可以简化为一个简单的指导原则。 如果您发现自己多次编写完全相同的代码，而副本之间的唯一区别是代码使用了不同的类型，那么请考虑是否可以使用类型参数。 另一种说法是，在注意到将要多次编写完全相同的代码之前，应该避免使用类型参数。 ","date":"2022-09-19","objectID":"/go-when-generics/:5:0","tags":["Go"],"title":"When Generics","uri":"/go-when-generics/"},{"categories":["Go Blog"],"content":"英文原文:Go maps in action ","date":"2022-09-16","objectID":"/go-maps/:0:0","tags":["Go"],"title":"Go Maps","uri":"/go-maps/"},{"categories":["Go Blog"],"content":"介绍 哈希表是计算机科学中最有用的数据结构之一。许多哈希表实现具有不同的属性，但通常它们提供快速查找、添加和删除。Go提供了实现哈希表的内置映射(map)类型。 ","date":"2022-09-16","objectID":"/go-maps/:1:0","tags":["Go"],"title":"Go Maps","uri":"/go-maps/"},{"categories":["Go Blog"],"content":"声明和初始化 Go 映射(map)类型看起来像这样: map[KeyType]ValueType 其中 KeyType 可以是任何comparable的类型(稍后详细介绍)， ValueType 可以是任何类型，包括另一个映射(map)! 变量 m 是字符串键到 int 值的映射: var m map[string]int map 类型是引用类型，比如指针或切片，所以上面 m 的值为nil;它不指向一个初始化的映射。 空映射(nil map)在读取时表现得像空映射(empty map)，但试图写入空映射(nil map)将导致运行时panic; 不要这样做。要初始化一个map ，使用内置的make函数: m = make(map[string]int) make 函数分配并初始化一个散列映射(hash map)数据结构，并返回指向它的映射(map)值。该数据结构的细节是运行时的实现细节，并不是由语言本身指定的。 在本文中，我们将重点讨论映射(maps)的使用，而不是它们的实现。 ","date":"2022-09-16","objectID":"/go-maps/:2:0","tags":["Go"],"title":"Go Maps","uri":"/go-maps/"},{"categories":["Go Blog"],"content":"使用映射(maps) Go 为处理映射(maps)提供了一种熟悉的语法。该语句将键“route”的值设置为66: m[\"route\"] = 66 该语句检索存储在键“route”下的值，并将其赋值给一个新变量i: i := m[\"route\"] 如果请求的键不存在，则得到值类型的零值。在本例中，值类型是int，所以0值是0: j := m[\"root\"] // j == 0 内置的 len 函数根据映射中的项数返回: n := len(m) 内置的 delete 函数从映射中删除一个条目: delete(m, \"route\") delete 函数不返回任何内容，如果指定的键不存在，则不执行任何操作。 双值赋值测试键是否存在: i, ok := m[\"route\"] 在这个语句中，第一个值(i)被分配到存储在键“route”下的值。如果该键不存在，i是值类型的零值(0)。 第二个值(ok)是一个bool值，如果该键在映射中存在则为true，如果不存在则为false。 要在不检索值的情况下测试键，在第一个值处使用下划线: _, ok := m[\"route\"] 要遍历映射的内容，使用range关键字: for key, value := range m { fmt.Println(\"Key:\", key, \"Value:\", value) } 要用一些数据初始化一个映射，使用一个映射字面量: commits := map[string]int{ \"rsc\": 3711, \"r\": 2138, \"gri\": 1908, \"adg\": 912, } 可以使用相同的语法初始化一个空映射(empty map)，在功能上与使用 make 函数相同: m = map[string]int{} ","date":"2022-09-16","objectID":"/go-maps/:3:0","tags":["Go"],"title":"Go Maps","uri":"/go-maps/"},{"categories":["Go Blog"],"content":"利用零值 当键不存在时，映射检索产生零值是很方便的。 例如，布尔值的映射可以用作类似集合的数据结构(回想一下布尔类型的零值为false)。 这个示例遍历一个节点链表并打印它们的值。它使用Node指针的映射来检测列表中的循环。 type Node struct { Next *Node Value interface{} } var first *Node visited := make(map[*Node]bool) // key line for n := first; n != nil; n = n.Next { if visited[n] { // key line fmt.Println(\"cycle detected\") break } visited[n] = true // key line fmt.Println(n.Value) } 表达式 visited[n] 如果访问过n则为真，如果n不存在则为假。没有必要使用二值形式来测试映射中是否存在n;默认的0值为我们做了这些。 另一个有用的零值实例是切片的映射。向nil切片添加值只是分配一个新切片，所以向切片的映射添加值是一行程序;不需要检查键是否存在。 在下面的示例中，People切片使用Person值填充。每个人都有一个名字和一个点赞切片。该示例创建了一个映射，将每个点赞与喜欢它的人的一个切片联系起来。 type Person struct { Name string Likes []string } var people []*Person likes := make(map[string][]*Person) // key line for _, p := range people { for _, l := range p.Likes { likes[l] = append(likes[l], p) // key line } } 打印一个喜欢奶酪的人的列表: for _, p := range likes[\"cheese\"] { fmt.Println(p.Name, \"likes cheese.\") } 打印喜欢培根的人的数量: fmt.Println(len(likes[\"bacon\"]), \"people like bacon.\") 请注意，由于range和len都将nil切片视为零长度的切片，所以即使没有人喜欢奶酪或培根，最后两个例子也可以工作(不管这种情况有多不可能)。 ","date":"2022-09-16","objectID":"/go-maps/:4:0","tags":["Go"],"title":"Go Maps","uri":"/go-maps/"},{"categories":["Go Blog"],"content":"键类型 如前所述，映射键可以是任何可比较的类型。 语言规范对此进行了精确的定义，但简而言之，可比较的类型是布尔型、数值型、字符串型、指针型、通道型和接口型，以及只包含这些类型的结构体或数组。 值得注意的是，列表中没有切片、映射和函数;这些类型不能使用==进行比较，也不能用作映射键。 显然，字符串、int和其他基本类型应该作为映射键可用，但结构体键(struct keys)可能出乎意料。Struct可用于多个维度的键数据。 例如，这个map of maps可以用来按国家统计网页点击量: hits := make(map[string]map[string]int) 这是string到(string到int)的映射。外部映射的每个键都是到具有自己内部映射的网页的路径。 每个内部映射键都是两个字母的国家代码。这个表达式获取一个澳大利亚人加载文档页面的次数: n := hits[\"/doc/\"][\"au\"] 不幸的是，这种方法在添加数据时变得笨拙，因为对于任何给定的外部键，你必须检查内部映射是否存在，并在需要时创建它: func add(m map[string]map[string]int, path, country string) { mm, ok := m[path] if !ok { mm = make(map[string]int) m[path] = mm } mm[country]++ } add(hits, \"/doc/\", \"au\") 另一方面，使用一个带有struct键的单一映射的设计消除了所有的复杂性: type Key struct { Path, Country string } hits := make(map[Key]int) 当一个越南人访问主页时，增加(可能创建)相应的计数器是一行代码: hits[Key{\"/\", \"vn\"}]++ 同样，也很容易看出有多少瑞士人读过spec: n := hits[Key{\"/ref/spec\", \"ch\"}] ","date":"2022-09-16","objectID":"/go-maps/:5:0","tags":["Go"],"title":"Go Maps","uri":"/go-maps/"},{"categories":["Go Blog"],"content":"并发 映射对于并发使用是不安全的:它没有定义当您同时读写它们时会发生什么。 如果需要从并发执行的goroutine中对映射进行读写，则访问必须通过某种同步机制进行调节。 保护映射的一种常用方法是使用sync.RWMutex。 这条语句声明了一个计数器变量，它是一个匿名结构体，包含一个映射和一个嵌入的sync.RWMutex。 var counter = struct{ sync.RWMutex m map[string]int }{m: make(map[string]int)} 要从计数器读取，取读锁: counter.RLock() n := counter.m[\"some_key\"] counter.RUnlock() fmt.Println(\"some_key:\", n) 要写入计数器，取写锁: counter.Lock() counter.m[\"some_key\"]++ counter.Unlock() ","date":"2022-09-16","objectID":"/go-maps/:6:0","tags":["Go"],"title":"Go Maps","uri":"/go-maps/"},{"categories":["Go Blog"],"content":"迭代顺序 当使用range循环在映射上迭代时，不会指定迭代顺序，也不能保证从一个迭代到下一个迭代是相同的。 如果需要稳定的迭代顺序，则必须维护指定该顺序的独立数据结构。 下面的例子使用一个单独的排序的键切片按键的顺序打印一个map[int]字符串: import \"sort\" var m map[int]string var keys []int for k := range m { keys = append(keys, k) } sort.Ints(keys) for _, k := range keys { fmt.Println(\"Key:\", k, \"Value:\", m[k]) } ","date":"2022-09-16","objectID":"/go-maps/:7:0","tags":["Go"],"title":"Go Maps","uri":"/go-maps/"},{"categories":["Go Blog"],"content":"英文原文: Share Memory By Communicating 传统的线程模型（例如，在编写Java、C++和Python程序时通常使用）要求程序员使用共享内存在线程之间进行通信。 通常情况下，共享数据结构受到锁的保护，而线程将争夺这些锁来访问数据。在某些情况下，使用线程安全的数据结构(如Python的Queue)会使这更容易。 Go的并发原语 - goroutines和channels - 为构造并发软件提供了一种优雅而独特的方法。(这些概念有一个有趣的历史， 始于C.A.R.Hoare的 Communicating Sequential Processes）。 Go鼓励使用通道在goroutine之间传递对数据的引用，而不是明确地使用锁来调解对共享数据的访问。这种方法可以确保在给定时间内只有一个goroutine可以访问数据。 这个概念在Effective Go文件中得到了总结（任何Go程序员都必须阅读）: 不要通过共享内存来进行通信，相反，通过通信来共享内存 考虑一个程序，它轮询一个url列表。在传统的线程环境中，数据的结构可能是这样的: type Resource struct { url string polling bool lastPolled int64 } type Resources struct { data []*Resource lock *sync.Mutex } 然后一个轮询器函数(其中许多会在单独的线程中运行)可能看起来像这样: func Poller(res *Resources) { for { // get the least recently-polled Resource // and mark it as being polled res.lock.Lock() var r *Resource for _, v := range res.data { if v.polling { continue } if r == nil || v.lastPolled \u003c r.lastPolled { r = v } } if r != nil { r.polling = true } res.lock.Unlock() if r == nil { continue } // poll the URL // update the Resource's polling and lastPolled res.lock.Lock() r.polling = false r.lastPolled = time.Nanoseconds() res.lock.Unlock() } } 这个函数大约有一页那么长，需要更多的细节来完成它。它甚至不包括URL轮询逻辑(它本身只有几行)，也不会优雅地处理耗尽资源池的问题。 让我们来看看使用Go习语实现的相同功能。在本例中，Poller是一个函数，它从输入通道接收要轮询的资源，并在完成时将它们发送到输出通道。 type Resource string func Poller(in, out chan *Resource) { for r := range in { // poll the URL // send the processed Resource to out out \u003c- r } } 前面示例中微妙的逻辑明显不存在了，而且我们的Resource数据结构不再包含记账数据。事实上，剩下的都是重要的部分。这应该会让您对这些简单的语言特性的功能有一个初步的了解。 上面的代码片段有许多遗漏。有关使用这些思想的完整的、惯用的Go程序的演练，请参见Codewalk Share Memory By Communicating。 ","date":"2022-09-16","objectID":"/go-communication/:0:0","tags":["Go"],"title":"Share Memory By Communicating","uri":"/go-communication/"},{"categories":["Go Blog"],"content":"英文原文: Defer, Panic, and Recover ","date":"2022-09-16","objectID":"/go-defer-panic-and-recover/:0:0","tags":["Go"],"title":"Defer Panic and Recover","uri":"/go-defer-panic-and-recover/"},{"categories":["Go Blog"],"content":"介绍 Go有常见的控制流机制：if、for、switch、goto。它也有go语句来运行单独的goroutine中的代码。这里我想讨论一些不太常见的机制：defer、panic和recover。 ","date":"2022-09-16","objectID":"/go-defer-panic-and-recover/:1:0","tags":["Go"],"title":"Defer Panic and Recover","uri":"/go-defer-panic-and-recover/"},{"categories":["Go Blog"],"content":"defer defer语句将一个函数调用推到一个列表中。保存的调用列表在周围的函数返回后被执行。defer通常被用来简化执行各种清理动作的函数。 例如，让我们看看一个打开两个文件并将一个文件的内容复制到另一个文件的函数: func CopyFile(dstName, srcName string) (written int64, err error) { src, err := os.Open(srcName) if err != nil { return } dst, err := os.Create(dstName) if err != nil { return } written, err = io.Copy(dst, src) dst.Close() src.Close() return } 这可以工作，但有一个错误。如果对os.Create的调用失败，该函数将在没有关闭源文件的情况下返回。这可以通过在第二个返回语句之前调用 src.Close 来轻松解决，但如果这个函数更复杂，问题可能就不会那么容易被注意和解决了。通过引入defer语句，我们可以确保文件始终被关闭: func CopyFile(dstName, srcName string) (written int64, err error) { src, err := os.Open(srcName) if err != nil { return } defer src.Close() dst, err := os.Create(dstName) if err != nil { return } defer dst.Close() return io.Copy(dst, src) } 延迟语句允许我们考虑在打开每个文件后立即关闭它，确保无论函数中返回语句的数量如何，文件都将被关闭。 延迟语句的行为是直接的和可预测的。有三个简单的规则: 1. 当对defer语句求值时，对deferred函数的实参进行求值。 在本例中，当Println调用被延迟时，表达式“i”被求值。延迟调用将在函数返回后打印“0”。 func a() { i := 0 defer fmt.Println(i) i++ return } 2. 延迟的函数调用在周围的函数返回后按照后进先出的顺序执行 这个函数输出\"3210\"： func b() { for i := 0; i \u003c 4; i++ { defer fmt.Print(i) } } 3. 延迟函数可以读取并赋值给返回函数的命名返回值。 在本例中，延迟函数在周围的函数返回后将返回值i加1。因此，这个函数返回2: func c() (i int) { defer func() { i++ }() return 1 } 这便于修改函数的错误返回值;稍后我们将看到一个这样的例子。 ","date":"2022-09-16","objectID":"/go-defer-panic-and-recover/:1:1","tags":["Go"],"title":"Defer Panic and Recover","uri":"/go-defer-panic-and-recover/"},{"categories":["Go Blog"],"content":"Panic Panic 是一个内置函数，它会停止正常的控制流程，开始panic。当函数F调用panic时，F的执行将停止，F中的任何defer函数将正常执行，然后F返回给调用者。对于调用者来说，F的行为就像是在呼叫panic。该过程沿着堆栈向上继续，直到当前goroutine中的所有函数都返回，此时程序将崩溃。panic可以通过直接调用panic而引发。它们也可能由运行时错误引起，例如越界数组访问。 ","date":"2022-09-16","objectID":"/go-defer-panic-and-recover/:1:2","tags":["Go"],"title":"Defer Panic and Recover","uri":"/go-defer-panic-and-recover/"},{"categories":["Go Blog"],"content":"Recover Recover 是一个内置函数，它可以重新控制一个处于panic状态的goroutine。Recover只在延迟函数中有用。在正常执行期间，调用恢复将返回nil，没有其他效果。如果当前goroutine处于panic状态，则调用recover将捕获给panic的值并恢复正常执行。 下面是一个演示panic和defer机制的示例程序: package main import \"fmt\" func main() { f() fmt.Println(\"Returned normally from f.\") } func f() { defer func() { if r := recover(); r != nil { fmt.Println(\"Recovered in f\", r) } }() fmt.Println(\"Calling g.\") g(0) fmt.Println(\"Returned normally from g.\") } func g(i int) { if i \u003e 3 { fmt.Println(\"Panicking!\") panic(fmt.Sprintf(\"%v\", i)) } defer fmt.Println(\"Defer in g\", i) fmt.Println(\"Printing in g\", i) g(i + 1) } 函数g接受int i，如果i大于3，它会发生panic，否则它调用自身，参数是i+1。函数f延迟调用recover的函数并打印恢复的值(如果它是非空值)。在继续阅读之前，试着想象一下这个程序的输出可能是什么。 该程序将输出： Calling g. Printing in g 0 Printing in g 1 Printing in g 2 Printing in g 3 Panicking! Defer in g 3 Defer in g 2 Defer in g 1 Defer in g 0 Recovered in f 4 Returned normally from f. 如果从f中删除deferred函数，则panic没有恢复，并且到达goroutine的调用堆栈的顶部，从而终止程序。修改后的程序将输出: Calling g. Printing in g 0 Printing in g 1 Printing in g 2 Printing in g 3 Panicking! Defer in g 3 Defer in g 2 Defer in g 1 Defer in g 0 panic: 4 panic PC=0x2a9cd8 [stack trace omitted] ","date":"2022-09-16","objectID":"/go-defer-panic-and-recover/:1:3","tags":["Go"],"title":"Defer Panic and Recover","uri":"/go-defer-panic-and-recover/"},{"categories":["Go Blog"],"content":"More 关于panic和recover的真实示例，请参阅Go标准库中的json包。它用一组递归函数对接口进行编码。如果在遍历值时发生错误，将调用panic以将堆栈展开到顶层函数调用，该函数从panic中恢复并返回适当的错误值(请参阅encode.go中encodeState类型的’ error ‘和’ marshal ‘方法)。 Go库中的惯例是，即使一个包在内部使用panic，它的其他外部API仍然显式的错误返回值。 defer 的其他用途（除了前面给出的file.Close例子之外）包括释放一个mutex： mu.Lock() defer mu.Unlock() 打印页脚： printHeader() defer printFooter() 以及更多。 总之，defer语句(带或不带panic和recover)为控制流提供了一种不同寻常的强大机制。它可以用于建模由其他编程语言中的特殊目的结构实现的许多特性。试一下。 ","date":"2022-09-16","objectID":"/go-defer-panic-and-recover/:1:4","tags":["Go"],"title":"Defer Panic and Recover","uri":"/go-defer-panic-and-recover/"},{"categories":["Go Blog"],"content":"英文原文:Go Slices: usage and internals ","date":"2022-09-16","objectID":"/go-slice/:0:0","tags":["Go"],"title":"Go Slice","uri":"/go-slice/"},{"categories":["Go Blog"],"content":"介绍 Go 的切片类型为处理类型化数据的序列提供了一种方便而有效的方法。切片类似于其他语言中的数组，但有一些不寻常的特性。本文将探讨什么是切片以及如何使用切片。 ","date":"2022-09-16","objectID":"/go-slice/:1:0","tags":["Go"],"title":"Go Slice","uri":"/go-slice/"},{"categories":["Go Blog"],"content":"数组(Arrays) 切片类型是建立在Go的数组类型之上的一个抽象，因此要理解切片，我们必须先理解数组。 一个数组类型定义指定了一个长度和一个元素类型。例如，[4]int类型表示一个包含四个整数的数组。一个数组的大小是固定的；它的长度是其类型的一部分（[4]int和[5]int是不同的，不兼容的类型）。数组可以用常规方式进行索引，所以表达式s[n]可以访问第n个元素，从0开始。 var a [4]int a[0] = 1 i := a[0] // i == 1 数组不需要显式初始化，数组的零值是一个随时可以使用的数组，其元素本身已经归零: // a[2] == 0, the zero value of the int type [4]int的内存表示只是四个按顺序排列的整数值。 Go 的数组是数值。一个数组变量表示整个数组；它不是指向第一个数组元素的指针（在C语言中是这样的）。这意味着当你分配或传递一个数组的值时，你将复制其内容。(为了避免复制，你可以传递一个指向数组的指针，但那是一个指向数组的指针，而不是一个数组。) 考虑数组的一种方法是作为一种结构，但具有索引而不是命名字段：一个固定大小的复合值. 数组字面值可以这样指定： b := [2]string{\"Penn\", \"Teller\"} 或者，您可以让编译器为您计算数组元素: b := [...]string{\"Penn\", \"Teller\"} 在这两种情况下，b的类型都是[2]string ","date":"2022-09-16","objectID":"/go-slice/:2:0","tags":["Go"],"title":"Go Slice","uri":"/go-slice/"},{"categories":["Go Blog"],"content":"切片(Slices) 数组有自己的位置，但它们有点不灵活，所以在Go代码中不太常见。然而，切片随处可见。它们以数组为基础，提供强大的力量和便利。 切片的类型规范是[]T，其中T是切片元素的类型。与数组类型不同，切片类型没有指定的长度。 slice 字面量的声明就像数组字面量一样，只是省略了元素计数： letters := []string{\"a\", \"b\", \"c\", \"d\"} 切片可以用内置的make函数创建，它的签名是： func make([]T, len, cap) []T T 代表要创建切片的元素类型。make函数接收元素类型，长度和可选容量。调用时，make 将分配一个数组并返回指向该数组的切片。 var s []byte s = make([]byte, 5, 5) // s == []byte{0, 0, 0, 0, 0} 当省略容量参数时，默认为指定的长度。这是相同代码的更简洁版本： s := make([]byte, 5) 可以使用内置的len和cap函数检查切片的长度和容量 len(s) == 5 cap(s) == 5 接下来的两个部分讨论长度和容量之间的关系。 切片的零值为nil。len和cap函数对于nil切片都将返回0。 切片也可以通过“切片”现有的切片或数组来形成。切片是通过指定一个半开的区间和两个用冒号分隔的索引来完成的。例如，表达式b[1:4]创建了一个包含b的元素1到3的切片(结果切片的索引将是0到2)。 b := []byte{'g', 'o', 'l', 'a', 'n', 'g'} // b[1:4] == []byte{'o', 'l', 'a'}, sharing the same storage as b 切片表达式的开始和结束索引是可选的;它们的默认值分别为0和slice的长度: // b[:2] == []byte{'g', 'o'} // b[2:] == []byte{'l', 'a', 'n', 'g'} // b[:] == b 这也是在给定数组的情况下创建切片的语法: x := [3]string{\"Лайка\", \"Белка\", \"Стрелка\"} s := x[:] // a slice referencing the storage of x ","date":"2022-09-16","objectID":"/go-slice/:3:0","tags":["Go"],"title":"Go Slice","uri":"/go-slice/"},{"categories":["Go Blog"],"content":"切片内部(Slice internals) 一个切片是一个数组段的描述符。它由指向数组的指针、段的长度和它的容量(段的最大长度)组成。 之前由 make([]byte, 5) 创建的变量s的结构是这样的: 长度是切片引用的元素的数量。容量是底层数组中的元素数量(从切片指针引用的元素开始)。在接下来的几个示例中，我们将清楚地说明长度和容量之间的区别。 当我们对s切片时，观察切片数据结构的变化及其与基础数组的关系： s = s[2:4] 切片操作不会复制原始切片的数据。它创建一个指向原始数组的新切片值。这使得切片操作与操作数组下标一样高效。因此，修改新切片的元素(而不是切片本身)会修改原始切片的元素: d := []byte{'r', 'o', 'a', 'd'} e := d[2:] // e == []byte{'a', 'd'} e[1] = 'm' // e == []byte{'a', 'm'} // d == []byte{'r', 'o', 'a', 'm'} 之前我们将s切成比其容量更短的长度。我们可以通过再次切片使s增长到它的容量： s = s[:cap(s)] 一个切片不能超过它的容量。尝试这样做将导致运行时恐慌，就像在切片或数组边界外进行索引一样。同样，不能将切片重新切到0以下以访问数组中较早的元素。 ","date":"2022-09-16","objectID":"/go-slice/:4:0","tags":["Go"],"title":"Go Slice","uri":"/go-slice/"},{"categories":["Go Blog"],"content":"Growing slices (the copy and append functions) 要增长一个切片的容量，必须创建一个新的、更大的切片，并将原始切片的内容复制到其中。这种技术就是来自其他语言的动态数组实现在幕后工作的方式。下面的例子通过创建一个新的切片t，将s的内容复制到t中，然后将切片值t赋给s，从而使s的容量翻倍: t := make([]byte, len(s), (cap(s)+1)*2) // +1 in case cap(s) == 0 for i := range s { t[i] = s[i] } s = t 内置的copy函数简化了这个常见操作的循环部分。顾名思义，copy将数据从源片复制到目标片。它返回复制的元素数量。 func copy(dst, src []T) int copy 函数支持在不同长度的切片之间进行复制(它只复制较少数量的元素)。此外，copy函数可以处理共享相同底层数组的源片和目标片，正确处理重叠的切片。 使用copy，我们可以简化上面的代码片段: t := make([]byte, len(s), (cap(s)+1)*2) copy(t, s) s = t 一种常见的操作是将数据追加到一个切片的末尾。这个函数将字节元素追加到字节的切片中，必要时增加切片，并返回更新后的切片值： func AppendByte(slice []byte, data ...byte) []byte { m := len(slice) n := m + len(data) if n \u003e cap(slice) { // if necessary, reallocate // allocate double what's needed, for future growth. newSlice := make([]byte, (n+1)*2) copy(newSlice, slice) slice = newSlice } slice = slice[0:n] copy(slice[m:n], data) return slice } 可以这样使用 AppendByte： p := []byte{2, 3, 5} p = AppendByte(p, 7, 11, 13) // p == []byte{2, 3, 5, 7, 11, 13} 像 AppendByte 这样的函数很有用，因为它们提供了对切片增长方式的完全控制。根据程序的特点，可能需要分配更小或更大的块，或对重新分配的大小设置一个上限。 但是大多数程序不需要完全控制，所以Go提供了一个内置的 append 函数，这对大多数目的都很好;它有签名: func append(s []T, x ...T) []T append 函数将元素x追加到切片s的末尾，如果需要更大的容量，则会增长切片。 a := make([]int, 1) // a == []int{0} a = append(a, 1, 2, 3) // a == []int{0, 1, 2, 3} 要将一个切片附加到另一个切片，使用…将第二个参数拓展为一个参数列表。 a := []string{\"John\", \"Paul\"} b := []string{\"George\", \"Ringo\", \"Pete\"} a = append(a, b...) // equivalent to \"append(a, b[0], b[1], b[2])\" // a == []string{\"John\", \"Paul\", \"George\", \"Ringo\", \"Pete\"} 因为切片的零值(nil)就像一个零长度的切片，你可以声明一个切片变量，然后在循环中添加它: // Filter returns a new slice holding only // the elements of s that satisfy fn() func Filter(s []int, fn func(int) bool) []int { var p []int // == nil for _, v := range s { if fn(v) { p = append(p, v) } } return p } ","date":"2022-09-16","objectID":"/go-slice/:5:0","tags":["Go"],"title":"Go Slice","uri":"/go-slice/"},{"categories":["Go Blog"],"content":"一个可能的“陷阱” 如前所述，重新切片并不会生成底层数组的副本。整个数组将保存在内存中，直到它不再被引用。有时，这可能导致程序将所有数据保存在内存中，而实际上只需要一小部分数据。 例如，FindDigits 函数将一个文件加载到内存中，并在其中搜索第一组连续的数字，将它们作为一个新片返回。 var digitRegexp = regexp.MustCompile(\"[0-9]+\") func FindDigits(filename string) []byte { b, _ := ioutil.ReadFile(filename) return digitRegexp.Find(b) } 此代码的行为与所宣传的一样，但返回的[]byte指向包含整个文件的数组。由于切片引用原始数组，只要切片被保留在垃圾收集器周围，就不能释放数组;文件的几个有用字节将整个内容保存在内存中。 为了解决这个问题，你可以在返回之前将感兴趣的数据复制到一个新的切片: func CopyDigits(filename string) []byte { b, _ := ioutil.ReadFile(filename) b = digitRegexp.Find(b) c := make([]byte, len(b)) copy(c, b) return c } 这个函数的一个更简洁的版本可以通过使用 append 构造。 ","date":"2022-09-16","objectID":"/go-slice/:6:0","tags":["Go"],"title":"Go Slice","uri":"/go-slice/"},{"categories":["Life"],"content":"OKR (Objectives and Key Results) 由 Andy Grove 发明，Intel、Google 践行的目标管理方法。 ","date":"2022-08-29","objectID":"/use-okr/:0:0","tags":["method"],"title":"使用OKR","uri":"/use-okr/"},{"categories":["Life"],"content":"OKR 能带给你什么 Something Bigger Than Yourself. 通过设立「富有挑战性的目标」，会让你取得之前都不敢想象的成就。 ","date":"2022-08-29","objectID":"/use-okr/:1:0","tags":["method"],"title":"使用OKR","uri":"/use-okr/"},{"categories":["Life"],"content":"我的「普通」新年计划 学习理财： 学习香帅金融课 学习薛兆丰经济学课 了解指数基金 ","date":"2022-08-29","objectID":"/use-okr/:2:0","tags":["method"],"title":"使用OKR","uri":"/use-okr/"},{"categories":["Life"],"content":"「普通」新年计划有什么问题？ 由待办事项组成，缺失目标导向 无法量化完成情况 动力不足 ","date":"2022-08-29","objectID":"/use-okr/:3:0","tags":["method"],"title":"使用OKR","uri":"/use-okr/"},{"categories":["Life"],"content":"使用 OKR 制定新年计划 目标 Objects: 通过股票投资赚钱 关键结果: Key Results 输出股票资产的知识框架(含微观与宏观的分析方法) 设计定投规则，使用月收入30%进行定投，执行效率不得低于90% 建仓时间至少为一年，投资回报率大于等于6% ","date":"2022-08-29","objectID":"/use-okr/:4:0","tags":["method"],"title":"使用OKR","uri":"/use-okr/"},{"categories":["Life"],"content":"OKR的「精髓」是什么 一个目标，可以对应多个关键结果， 目标达成的情况是由这几个关键结果的完成情况来衡量的。 I will achieve object as measured by key values. ","date":"2022-08-29","objectID":"/use-okr/:5:0","tags":["method"],"title":"使用OKR","uri":"/use-okr/"},{"categories":["Life"],"content":"制定目标与关键结果的建议 富有挑战性的目标，迫使你逆向思考 聚焦在目标上，而非行动项 KR 三要素：必须明确|有时间节点｜符合实际 ","date":"2022-08-29","objectID":"/use-okr/:6:0","tags":["method"],"title":"使用OKR","uri":"/use-okr/"},{"categories":["Life"],"content":"OKR 的注意点 制定 KR 需要前期调查 70% 完成算优秀 KR 随进展可变 ","date":"2022-08-29","objectID":"/use-okr/:7:0","tags":["method"],"title":"使用OKR","uri":"/use-okr/"},{"categories":["Life"],"content":"与「周计划」结合使用 参考资料 使用谷歌的目标管理方法-OKR：制定新年计划 ","date":"2022-08-29","objectID":"/use-okr/:8:0","tags":["method"],"title":"使用OKR","uri":"/use-okr/"},{"categories":["Life"],"content":"为什么要提高「专注力」 专注力 = 时间管理 = 注意力 本质：提高时间利用率 做成事的两个关键：效能(Effectiveness)与效率(Efficiency) 本质：专注力影响效率 取得成就 效能：做正确的事 - Do The Right Thing. 效率: 如何正确地做事 - Do The Thing Right. ","date":"2022-08-29","objectID":"/impove-focus/:1:0","tags":["Method"],"title":"提高专注力","uri":"/impove-focus/"},{"categories":["Life"],"content":"DI (Deep Involved) 一段时间内的一种专注状态 一个 DI 的时长为45分钟 DI 期间内只聚焦一件事 一天安排若干个 DI DI 不完整时，重新计时 两个 DI 之间有休息间隔，一般为10～15分钟 ","date":"2022-08-29","objectID":"/impove-focus/:2:0","tags":["Method"],"title":"提高专注力","uri":"/impove-focus/"},{"categories":["Life"],"content":"消除3大阻碍 ","date":"2022-08-29","objectID":"/impove-focus/:3:0","tags":["Method"],"title":"提高专注力","uri":"/impove-focus/"},{"categories":["Life"],"content":"被打断 创造条件，远离干扰源 请求对方的理解 - 重新约个时间 停止 DI，重新开始 ","date":"2022-08-29","objectID":"/impove-focus/:3:1","tags":["Method"],"title":"提高专注力","uri":"/impove-focus/"},{"categories":["Life"],"content":"胡思乱想 写在纸上 闭眼后深呼吸，注意力放在呼吸上 多做几次深呼吸 ","date":"2022-08-29","objectID":"/impove-focus/:3:2","tags":["Method"],"title":"提高专注力","uri":"/impove-focus/"},{"categories":["Life"],"content":"状态不在线 从简单的事情开始 坚持半个 DI 后再看看 回顾下目标，检查下Deadline 放弃，做当前想干的事情 ^.^ ","date":"2022-08-29","objectID":"/impove-focus/:3:3","tags":["Method"],"title":"提高专注力","uri":"/impove-focus/"},{"categories":["Life"],"content":"工具 Windows 下的倒计时工具：wnr Mac 下的倒计时工具：Horo (Mac App Store支持) iOS下的倒计时工具：使用siri进行45分钟倒计时 参考资料 高效率的秘密，我是如何提高专注力 | 生产力提升 ","date":"2022-08-29","objectID":"/impove-focus/:4:0","tags":["Method"],"title":"提高专注力","uri":"/impove-focus/"},{"categories":["Life"],"content":"动机 年初制定的计划完成度很低 时常感觉不知道该做什么 总是疲于应付突发情况 被事情带着走，控制感弱 焦虑，缺乏安全感 没有成长 ","date":"2022-08-29","objectID":"/make-weekly-plan/:1:0","tags":["Plan","Method"],"title":"制定周计划","uri":"/make-weekly-plan/"},{"categories":["Life"],"content":"工具 笔记软件, 多端同步 eg: 印象笔记 ","date":"2022-08-29","objectID":"/make-weekly-plan/:2:0","tags":["Plan","Method"],"title":"制定周计划","uri":"/make-weekly-plan/"},{"categories":["Life"],"content":"整体流程内容 本周计划列表 记录一周中需要做的事 新发现，新思考 记录那些闪现的 idea 周记录 中长期计划表 年度计划、季度计划、月计划 复盘回顾 价值评估 任务分解 主题日 ","date":"2022-08-29","objectID":"/make-weekly-plan/:3:0","tags":["Plan","Method"],"title":"制定周计划","uri":"/make-weekly-plan/"},{"categories":["Life"],"content":"整体流程步骤 记录 记录下这周发生的所有事情 回顾 复盘这周所有任务的执行情况，并结合中长期计划表， 再经过价值评估与任务分解得出下周的待办事项。 编排 将待办事件安排到每一个工作日 ","date":"2022-08-29","objectID":"/make-weekly-plan/:4:0","tags":["Plan","Method"],"title":"制定周计划","uri":"/make-weekly-plan/"},{"categories":["Life"],"content":"主题 ","date":"2022-08-29","objectID":"/make-weekly-plan/:5:0","tags":["Plan","Method"],"title":"制定周计划","uri":"/make-weekly-plan/"},{"categories":["Life"],"content":"记录 周计划执行时的记录 将遇到过的、想到过的、都记录下来 原则：先记下来，不着急做，除非是重要且紧急的事 确认 需要确认的内容 补充 需要补充的内容 关注 需要留意关注的内容 思考 平时思考的结果 闪现 idea 的记录 将大脑从记忆琐事中解脱出来，用来思考问题 原则：使用工具、将闪现的想法记录下来，重要的是这个操作要迅速，成本低，不能影响到思考本身 场景: 走路 洗澡 浏览网页 与人交谈 ","date":"2022-08-29","objectID":"/make-weekly-plan/:5:1","tags":["Plan","Method"],"title":"制定周计划","uri":"/make-weekly-plan/"},{"categories":["Life"],"content":"回顾 每周回顾 对本周的复盘 创建新的笔记，将这周发生的所有信息都汇总起来，包括中长期计划表中的内容 逐条评估！ 完成的情况怎么样？做得好的地方，没做好的地方 完成不理想的原因是什么？怎么改善？ 下周是否还要继续？是否可以委托别人做？ 是否有价值仔细阅读与学习？ 是否是对已有知识体系的补充？ 是否有利于长期成长？要持续关注？ 甄别最有价值的事情 原则：Pareto principle - 关键少数法则 是否有助于达成目标的关键事项 重要但不紧急的任务，可以降低发生重要又紧急的事情的概率， 会增加你的掌控感 每件事，都要有目标 原则：SMART criteria - SMART法则 目标，最好是可量化的 每一天只需要聚焦在具体事项的目标达成上 ","date":"2022-08-29","objectID":"/make-weekly-plan/:5:2","tags":["Plan","Method"],"title":"制定周计划","uri":"/make-weekly-plan/"},{"categories":["Life"],"content":"编排 事项划分 结合复盘内容与中长期计划表，将任务安排到下周的每一天 可以分为以下几大类： 工作 学习 创作 生活 享受 使命 重要的是平衡，否则无法长期维持 努力的目标那就是，享受生活 安排到每一天 同一天内尽量安排类似的事情 - 主题日 把一定要完成的事情安排在效率最高，不被打扰的时段 - 要事第一 ","date":"2022-08-29","objectID":"/make-weekly-plan/:5:3","tags":["Plan","Method"],"title":"制定周计划","uri":"/make-weekly-plan/"},{"categories":["Life"],"content":"注意事项 根据实际情况制定任务量，并不是越多越好，追求的应该是高质量完成， 不要给自己太多压力。 太多未完成任务会带来沮丧感。 如果经常被打断(集中思考)，需要与外部做协调，或给自己创造环境。 提醒自己关注下计划表 参考资料 我是怎么做周计划 | 生产力提升 | 我的方法 ","date":"2022-08-29","objectID":"/make-weekly-plan/:6:0","tags":["Plan","Method"],"title":"制定周计划","uri":"/make-weekly-plan/"},{"categories":["DevOps"],"content":"创建 GitHub repo,并生成token ","date":"2020-12-14","objectID":"/github-picgo/:1:0","tags":["Github","PicGo"],"title":"使用 GitHub repo + PicGo 搭建博客图床","uri":"/github-picgo/"},{"categories":["DevOps"],"content":"创建仓库 ","date":"2020-12-14","objectID":"/github-picgo/:1:1","tags":["Github","PicGo"],"title":"使用 GitHub repo + PicGo 搭建博客图床","uri":"/github-picgo/"},{"categories":["DevOps"],"content":"生成token 进入个人中心设置 进入Developer settings中，选择Personal aceess token,然后Generate new token. 生成 token(Note 部分随便写即可，下边的权限把 repo 相关的打上勾即可) 接下来便会生成一个 token，将它复制下来，因为一旦刷新网页，你将见不到这个 token 了。 ","date":"2020-12-14","objectID":"/github-picgo/:1:2","tags":["Github","PicGo"],"title":"使用 GitHub repo + PicGo 搭建博客图床","uri":"/github-picgo/"},{"categories":["DevOps"],"content":"下载安装 PicGo ","date":"2020-12-14","objectID":"/github-picgo/:2:0","tags":["Github","PicGo"],"title":"使用 GitHub repo + PicGo 搭建博客图床","uri":"/github-picgo/"},{"categories":["DevOps"],"content":"安装PicGo PicGo仓库。 ","date":"2020-12-14","objectID":"/github-picgo/:2:1","tags":["Github","PicGo"],"title":"使用 GitHub repo + PicGo 搭建博客图床","uri":"/github-picgo/"},{"categories":["DevOps"],"content":"GitHub图床配置 ","date":"2020-12-14","objectID":"/github-picgo/:3:0","tags":["Github","PicGo"],"title":"使用 GitHub repo + PicGo 搭建博客图床","uri":"/github-picgo/"},{"categories":["DevOps"],"content":"图床配置 PicGo的Github图床配置有固定的格式: 仓库名格式为:用户名/仓库名 分支名设置为:master Token设置为:上面获取到的token 存储路径可以随意,如设置为:img/ 自定义域名格式为: https://raw.githubusercontent.com/用户名/仓库名/分支名 ","date":"2020-12-14","objectID":"/github-picgo/:3:1","tags":["Github","PicGo"],"title":"使用 GitHub repo + PicGo 搭建博客图床","uri":"/github-picgo/"},{"categories":["DevOps"],"content":"GitHubPlus插件配置 GitHubPlus可以同步相册,当在PigGo的相册中删除图片后,会同步删除GitHub上的图片. ","date":"2020-12-14","objectID":"/github-picgo/:4:0","tags":["Github","PicGo"],"title":"使用 GitHub repo + PicGo 搭建博客图床","uri":"/github-picgo/"},{"categories":["DevOps"],"content":"同步更新删除GitHub 在插件设置的搜索框中,输入插件的名称:picgo-plugin-github-plus,然后安装这个插件. ","date":"2020-12-14","objectID":"/github-picgo/:4:1","tags":["Github","PicGo"],"title":"使用 GitHub repo + PicGo 搭建博客图床","uri":"/github-picgo/"},{"categories":["DevOps"],"content":"配置GitHubPlus 这个插件的配置和上面的Github图片配置差不多一样. ","date":"2020-12-14","objectID":"/github-picgo/:4:2","tags":["Github","PicGo"],"title":"使用 GitHub repo + PicGo 搭建博客图床","uri":"/github-picgo/"},{"categories":["DevOps"],"content":"PicGo其他配置 ","date":"2020-12-14","objectID":"/github-picgo/:5:0","tags":["Github","PicGo"],"title":"使用 GitHub repo + PicGo 搭建博客图床","uri":"/github-picgo/"},{"categories":["DevOps"],"content":"上传快捷方式 进入PicGo设置，修改上传快捷键(像这样，配合SniPaste食用更佳，每次F1截完图，选择复制，然后按绑定的组合键即可实现快速上传（快捷键上传的是剪切板中的东西）) ","date":"2020-12-14","objectID":"/github-picgo/:5:1","tags":["Github","PicGo"],"title":"使用 GitHub repo + PicGo 搭建博客图床","uri":"/github-picgo/"},{"categories":["DevOps"],"content":"参考文档 PicGo GitHub图床 配置PicGo成为多平台图床工具 ","date":"2020-12-14","objectID":"/github-picgo/:6:0","tags":["Github","PicGo"],"title":"使用 GitHub repo + PicGo 搭建博客图床","uri":"/github-picgo/"},{"categories":["DevOps"],"content":"Windows 常用快捷键 Ctrl + C : 复制 Ctrl + V : 粘贴 Ctrl + X : 剪切 Ctrl + Z : 撤销 Alt + F4 : 关闭窗口 Ctrl + Shift + Esc : 任务管理器 Win + R : 运行 Win + E : 资源管理器 ","date":"2020-07-05","objectID":"/windows-shortcut/:1:0","tags":["Windows","Linux"],"title":"Windows 与 Linux 基础使用","uri":"/windows-shortcut/"},{"categories":["DevOps"],"content":"常用 Dos 命令 #正斜杠与反斜杠 / 和 \\ 前正后反 #切换盘符 dir #查看当前目录下的所有文件 cd #切换目录 cd change directory cd .. #返回上一级目录 cd /d E:\\a #/d参数用于跨盘符切换 cls #清理屏幕(clear screen) exit #关闭终端 ipconfig #查看ip信息 查看ip的详细信息 ipconfig \\all #打开应用 mspaint #打开画图工具 calc #打开计算器 notepad #打开记事本 #ping 命令 ping www.baidu.com #文件操作 md 目录名 #创建文件夹 cd\u003e 文件名 #创建文件 del 文件名 #删除文件 rd 目录名 #移除文件夹 ","date":"2020-07-05","objectID":"/windows-shortcut/:2:0","tags":["Windows","Linux"],"title":"Windows 与 Linux 基础使用","uri":"/windows-shortcut/"},{"categories":["DevOps"],"content":"常用 Linux 命令 ##### 显示和修改文本文件 ##### $ echo \"Hello World!\" \u003e hello-world.txt $ cat hello-world.txt Hello World! $ echo \"Go is the best!\" \u003e\u003e hello-world.txt $ cat hello-world.txt Hello World! Go is the best! ##### 搜索文件和在文件内搜索 ##### $ find /etc -name hosts /etc/hosts /etc/avahi/hosts $ find /etc -name \"hosts*\" /etc/hosts /etc/hosts.allow /etc/hosts.deny /etc/avahi/hosts ##### 管理进程 ##### $ ps aux # ps aux命令列出当前正在运行的进程，并显示他们的PID。 # 比如查询 docker $ ps aux | grep docker root 115 0.0 0.0 4997956 168 ?? Ss 13Sep22 0:00.57 /Library/PrivilegedHelperTools/com.docker.vmnetd # 向进程发送信号 kill -signal pid # 通过kill -l可以看到所有的信号变量 $ kill -l # 常用的几个信号, TERM(请求优雅的终止)、KILL(强制杀死)。 $ kill -TERM pid # 命令后台运行 命令后面跟 \u0026 $ ping www.google.com \u0026 # 显示在后台运行的进程列表 $ jobs # 将恢复一个工作到前台 $ fg %job-number # job-number(对于前台) # 将一个正在前台执行的命令放到后台,暂停流程并恢复对命令行的控制 Control+Z组合键 # 重新启动该流程在后台 $ bg %job-number # (用于后台)。 ##### 管理权限 ###### # 三类 users: u:user g:group o:other 三种权限：r:read w:write x:execute 八进制表示:421 # changes the owner of the file $ chown user file # alters the owner group $ chgrp group file # changes the permissions for the file $ chmod rights file # example $ chmod 755 hello-world.txt ##### 获取系统信息和日志 ##### # 显示内存信息 $ free # 报告可用的文件系统中挂载的每个磁盘上的磁盘空间 $ df -h # df means disk free -h human readable # 显示运行会话的用户的身份，以及他们所属的组的列表 # 由于对某些文件或设备的访问可能只限于小组成员，检查可用的小组成员资格可能很有用 $ id # 返回一行记录内核名称(Linux)、主机名、内核版本、内核版本、机器类型(一个体系结构字符串，如x86_64)、以及操作系统的名称(GNU/Linux) # 此命令的输出通常应该包含在错误报告中，因为它清楚地定义了使用的内核和硬件平台上运行。 $ uname -a # 检索内核日志 # 通常你需要查阅日志来了解你的计算机上发生了什么。比如一个新的USB设备被插入。一个失败的硬盘操作，或者启动时的初始硬件检测 $ dmesg ##### 发现硬件 ##### # lists PCI devices $ lspci # lists USB devices $ lsusb # lists PCMCIA cards. $ lspcmcia ","date":"2020-07-05","objectID":"/windows-shortcut/:3:0","tags":["Windows","Linux"],"title":"Windows 与 Linux 基础使用","uri":"/windows-shortcut/"},{"categories":["Markdown"],"content":"这篇文章展示了基本的 Markdown 语法和格式.","date":"2019-12-01","objectID":"/basic-markdown-syntax/","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"这篇文章提供了可以在 Hugo 的文章中使用的基本 Markdown 语法示例. 注意 这篇文章借鉴了一篇很棒的来自 Grav 的文章. 如果你想了解 Loveit 主题的扩展 Markdown 语法, 请阅读扩展 Markdown 语法页面. 事实上, 编写 Web 内容很麻烦. WYSIWYG所见即所得 编辑器帮助减轻了这一任务. 但通常会导致代码太糟, 或更糟糕的是, 网页也会很丑. 没有通常伴随的所有复杂和丑陋的问题, Markdown 是一种更好的生成 HTML 内容的方式. 一些主要好处是: Markdown 简单易学, 几乎没有多余的字符, 因此编写内容也更快. 用 Markdown 书写时出错的机会更少. 可以产生有效的 XHTML 输出. 将内容和视觉显示保持分开, 这样就不会打乱网站的外观. 可以在你喜欢的任何文本编辑器或 Markdown 应用程序中编写内容. Markdown 使用起来很有趣! John Gruber, Markdown 的作者如是说: Markdown 格式的首要设计目标是更具可读性. 最初的想法是 Markdown 格式的文档应当以纯文本形式发布, 而不会看起来像被标签或格式说明所标记. 虽然 Markdown 的语法受到几种现有的文本到 HTML 转换工具的影响, 但 Markdown 语法的最大灵感来源是纯文本电子邮件的格式. – John Gruber 话不多说, 我们来回顾一下 Markdown 的主要语法以及生成的 HTML 样式! 技巧  将此页保存为书签，以备将来参考! ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:0:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"1 标题 从 h2 到 h6 的标题在每个级别上都加上一个 ＃: ## h2 标题 ### h3 标题 #### h4 标题 ##### h5 标题 ###### h6 标题 输出的 HTML 看起来像这样: \u003ch2\u003eh2 标题\u003c/h2\u003e \u003ch3\u003eh3 标题\u003c/h3\u003e \u003ch4\u003eh4 标题\u003c/h4\u003e \u003ch5\u003eh5 标题\u003c/h5\u003e \u003ch6\u003eh6 标题\u003c/h6\u003e 标题 ID 要添加自定义标题 ID, 请在与标题相同的行中将自定义 ID 放在花括号中: ### 一个很棒的标题 {#custom-id} 输出的 HTML 看起来像这样: \u003ch3 id=\"custom-id\"\u003e一个很棒的标题\u003c/h3\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:1:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"2 注释 注释是和 HTML 兼容的： \u003c!-- 这是一段注释 --\u003e 不能看到以下的注释: ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:2:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"3 水平线 HTML 中的 \u003chr\u003e 标签是用来在段落元素之间创建一个 “专题间隔” 的. 使用 Markdown, 你可以用以下方式创建一个 \u003chr\u003e 标签: ___: 三个连续的下划线 ---: 三个连续的破折号 ***: 三个连续的星号 呈现的输出效果如下: ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:3:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"4 段落 按照纯文本的方式书写段落, 纯文本在呈现的 HTML 中将用 \u003cp\u003e/\u003c/p\u003e 标签包裹. 如下段落: Lorem ipsum dolor sit amet, graecis denique ei vel, at duo primis mandamus. Et legere ocurreret pri, animal tacimates complectitur ad cum. Cu eum inermis inimicus efficiendi. Labore officiis his ex, soluta officiis concludaturque ei qui, vide sensibus vim ad. 输出的 HTML 看起来像这样: \u003cp\u003eLorem ipsum dolor sit amet, graecis denique ei vel, at duo primis mandamus. Et legere ocurreret pri, animal tacimates complectitur ad cum. Cu eum inermis inimicus efficiendi. Labore officiis his ex, soluta officiis concludaturque ei qui, vide sensibus vim ad.\u003c/p\u003e 可以使用一个空白行进行换行. ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:4:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"5 内联 HTML 元素 如果你需要某个 HTML 标签 (带有一个类), 则可以简单地像这样使用: Markdown 格式的段落. \u003cdiv class=\"class\"\u003e 这是 \u003cb\u003eHTML\u003c/b\u003e \u003c/div\u003e Markdown 格式的段落. ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:5:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"6 强调 ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:6:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"加粗 用于强调带有较粗字体的文本片段. 以下文本片段会被 渲染为粗体. **渲染为粗体** __渲染为粗体__ 输出的 HTML 看起来像这样: \u003cstrong\u003e渲染为粗体\u003c/strong\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:6:1","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"斜体 用于强调带有斜体的文本片段. 以下文本片段被 渲染为斜体. *渲染为斜体* _渲染为斜体_ 输出的 HTML 看起来像这样: \u003cem\u003e渲染为斜体\u003c/em\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:6:2","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"删除线 按照 GFMGitHub flavored Markdown 你可以使用删除线. ~~这段文本带有删除线.~~ 呈现的输出效果如下: 这段文本带有删除线. 输出的 HTML 看起来像这样: \u003cdel\u003e这段文本带有删除线.\u003c/del\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:6:3","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"组合 加粗, 斜体, 和删除线可以 组合使用. ***加粗和斜体*** ~~**删除线和加粗**~~ ~~*删除线和斜体*~~ ~~***加粗, 斜体和删除线***~~ 呈现的输出效果如下: 加粗和斜体 删除线和加粗 删除线和斜体 加粗, 斜体和删除线 输出的 HTML 看起来像这样: \u003cem\u003e\u003cstrong\u003e加粗和斜体\u003c/strong\u003e\u003c/em\u003e \u003cdel\u003e\u003cstrong\u003e删除线和加粗\u003c/strong\u003e\u003c/del\u003e \u003cdel\u003e\u003cem\u003e删除线和斜体\u003c/em\u003e\u003c/del\u003e \u003cdel\u003e\u003cem\u003e\u003cstrong\u003e加粗, 斜体和删除线\u003c/strong\u003e\u003c/em\u003e\u003c/del\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:6:4","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"7 引用 用于在文档中引用其他来源的内容块. 在要引用的任何文本之前添加 \u003e: \u003e **Fusion Drive** combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined. 呈现的输出效果如下: Fusion Drive combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined. 输出的 HTML 看起来像这样: \u003cblockquote\u003e \u003cp\u003e \u003cstrong\u003eFusion Drive\u003c/strong\u003e combines a hard drive with a flash storage (solid-state drive) and presents it as a single logical volume with the space of both drives combined. \u003c/p\u003e \u003c/blockquote\u003e 引用也可以嵌套: \u003e Donec massa lacus, ultricies a ullamcorper in, fermentum sed augue. Nunc augue augue, aliquam non hendrerit ac, commodo vel nisi. \u003e\u003e Sed adipiscing elit vitae augue consectetur a gravida nunc vehicula. Donec auctor odio non est accumsan facilisis. Aliquam id turpis in dolor tincidunt mollis ac eu diam. 呈现的输出效果如下: Donec massa lacus, ultricies a ullamcorper in, fermentum sed augue. Nunc augue augue, aliquam non hendrerit ac, commodo vel nisi. Sed adipiscing elit vitae augue consectetur a gravida nunc vehicula. Donec auctor odio non est accumsan facilisis. Aliquam id turpis in dolor tincidunt mollis ac eu diam. ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:7:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"8 列表 ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:8:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"无序列表 一系列项的列表, 其中项的顺序没有明显关系. 你可以使用以下任何符号来表示无序列表中的项: * 一项内容 - 一项内容 + 一项内容 例如: * Lorem ipsum dolor sit amet * Consectetur adipiscing elit * Integer molestie lorem at massa * Facilisis in pretium nisl aliquet * Nulla volutpat aliquam velit * Phasellus iaculis neque * Purus sodales ultricies * Vestibulum laoreet porttitor sem * Ac tristique libero volutpat at * Faucibus porta lacus fringilla vel * Aenean sit amet erat nunc * Eget porttitor lorem 呈现的输出效果如下: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Phasellus iaculis neque Purus sodales ultricies Vestibulum laoreet porttitor sem Ac tristique libero volutpat at Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem 输出的 HTML 看起来像这样: \u003cul\u003e \u003cli\u003eLorem ipsum dolor sit amet\u003c/li\u003e \u003cli\u003eConsectetur adipiscing elit\u003c/li\u003e \u003cli\u003eInteger molestie lorem at massa\u003c/li\u003e \u003cli\u003eFacilisis in pretium nisl aliquet\u003c/li\u003e \u003cli\u003eNulla volutpat aliquam velit \u003cul\u003e \u003cli\u003ePhasellus iaculis neque\u003c/li\u003e \u003cli\u003ePurus sodales ultricies\u003c/li\u003e \u003cli\u003eVestibulum laoreet porttitor sem\u003c/li\u003e \u003cli\u003eAc tristique libero volutpat at\u003c/li\u003e \u003c/ul\u003e \u003c/li\u003e \u003cli\u003eFaucibus porta lacus fringilla vel\u003c/li\u003e \u003cli\u003eAenean sit amet erat nunc\u003c/li\u003e \u003cli\u003eEget porttitor lorem\u003c/li\u003e \u003c/ul\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:8:1","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"有序列表 一系列项的列表, 其中项的顺序确实很重要. 1. Lorem ipsum dolor sit amet 2. Consectetur adipiscing elit 3. Integer molestie lorem at massa 4. Facilisis in pretium nisl aliquet 5. Nulla volutpat aliquam velit 6. Faucibus porta lacus fringilla vel 7. Aenean sit amet erat nunc 8. Eget porttitor lorem 呈现的输出效果如下: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem 输出的 HTML 看起来像这样: \u003col\u003e \u003cli\u003eLorem ipsum dolor sit amet\u003c/li\u003e \u003cli\u003eConsectetur adipiscing elit\u003c/li\u003e \u003cli\u003eInteger molestie lorem at massa\u003c/li\u003e \u003cli\u003eFacilisis in pretium nisl aliquet\u003c/li\u003e \u003cli\u003eNulla volutpat aliquam velit\u003c/li\u003e \u003cli\u003eFaucibus porta lacus fringilla vel\u003c/li\u003e \u003cli\u003eAenean sit amet erat nunc\u003c/li\u003e \u003cli\u003eEget porttitor lorem\u003c/li\u003e \u003c/ol\u003e 技巧 如果你对每一项使用 1., Markdown 将自动为每一项编号. 例如: 1. Lorem ipsum dolor sit amet 1. Consectetur adipiscing elit 1. Integer molestie lorem at massa 1. Facilisis in pretium nisl aliquet 1. Nulla volutpat aliquam velit 1. Faucibus porta lacus fringilla vel 1. Aenean sit amet erat nunc 1. Eget porttitor lorem 呈现的输出效果如下: Lorem ipsum dolor sit amet Consectetur adipiscing elit Integer molestie lorem at massa Facilisis in pretium nisl aliquet Nulla volutpat aliquam velit Faucibus porta lacus fringilla vel Aenean sit amet erat nunc Eget porttitor lorem ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:8:2","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"任务列表 任务列表使你可以创建带有复选框的列表. 要创建任务列表, 请在任务列表项之前添加破折号 (-) 和带有空格的方括号 ([ ]). 要选择一个复选框，请在方括号之间添加 x ([x]). - [x] Write the press release - [ ] Update the website - [ ] Contact the media 呈现的输出效果如下: Write the press release Update the website Contact the media ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:8:3","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"9 代码 ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:9:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"行内代码 用 ` 包装行内代码段. 在这个例子中, `\u003csection\u003e\u003c/section\u003e` 会被包裹成 **代码**. 呈现的输出效果如下: 在这个例子中, \u003csection\u003e\u003c/section\u003e 会被包裹成 代码. 输出的 HTML 看起来像这样: \u003cp\u003e 在这个例子中, \u003ccode\u003e\u0026lt;section\u0026gt;\u0026lt;/section\u0026gt;\u003c/code\u003e 会被包裹成 \u003cstrong\u003e代码\u003c/strong\u003e. \u003c/p\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:9:1","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"缩进代码 将几行代码缩进至少四个空格，例如: // Some comments line 1 of code line 2 of code line 3 of code 呈现的输出效果如下: // Some comments line 1 of code line 2 of code line 3 of code 输出的 HTML 看起来像这样: \u003cpre\u003e \u003ccode\u003e // Some comments line 1 of code line 2 of code line 3 of code \u003c/code\u003e \u003c/pre\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:9:2","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"围栏代码块 使用 “围栏” ``` 来生成一段带有语言属性的代码块. ```markdown Sample text here... ``` 输出的 HTML 看起来像这样: \u003cpre language-html\u003e \u003ccode\u003eSample text here...\u003c/code\u003e \u003c/pre\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:9:3","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"语法高亮 GFMGitHub Flavored Markdown 也支持语法高亮. 要激活它，只需在第一个代码 “围栏” 之后直接添加你要使用的语言的文件扩展名, ```js, 语法高亮显示将自动应用于渲染的 HTML 中. 例如, 在以下 JavaScript 代码中应用语法高亮: ```js grunt.initConfig({ assemble: { options: { assets: 'docs/assets', data: 'src/data/*.{json,yml}', helpers: 'src/custom-helpers.js', partials: ['src/partials/**/*.{hbs,md}'] }, pages: { options: { layout: 'default.hbs' }, files: { './': ['src/templates/pages/index.hbs'] } } } }; ``` 呈现的输出效果如下: grunt.initConfig({ assemble: { options: { assets: 'docs/assets', data: 'src/data/*.{json,yml}', helpers: 'src/custom-helpers.js', partials: ['src/partials/**/*.{hbs,md}'] }, pages: { options: { layout: 'default.hbs' }, files: { './': ['src/templates/pages/index.hbs'] } } } }; 注意 Hugo 文档中的 语法高亮页面 介绍了有关语法高亮的更多信息, 包括语法高亮的 shortcode. ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:9:4","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"10 表格 通过在每个单元格之间添加竖线作为分隔线, 并在标题下添加一行破折号 (也由竖线分隔) 来创建表格. 注意, 竖线不需要垂直对齐. | Option | Description | | ------ | ----------- | | data | path to data files to supply the data that will be passed into templates. | | engine | engine to be used for processing templates. Handlebars is the default. | | ext | extension to be used for dest files. | 呈现的输出效果如下: Option Description data path to data files to supply the data that will be passed into templates. engine engine to be used for processing templates. Handlebars is the default. ext extension to be used for dest files. 输出的 HTML 看起来像这样: \u003ctable\u003e \u003cthead\u003e \u003ctr\u003e \u003cth\u003eOption\u003c/th\u003e \u003cth\u003eDescription\u003c/th\u003e \u003c/tr\u003e \u003c/thead\u003e \u003ctbody\u003e \u003ctr\u003e \u003ctd\u003edata\u003c/td\u003e \u003ctd\u003epath to data files to supply the data that will be passed into templates.\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003eengine\u003c/td\u003e \u003ctd\u003eengine to be used for processing templates. Handlebars is the default.\u003c/td\u003e \u003c/tr\u003e \u003ctr\u003e \u003ctd\u003eext\u003c/td\u003e \u003ctd\u003eextension to be used for dest files.\u003c/td\u003e \u003c/tr\u003e \u003c/tbody\u003e \u003c/table\u003e 文本右对齐或居中对齐 在任何标题下方的破折号右侧添加冒号将使该列的文本右对齐. 在任何标题下方的破折号两边添加冒号将使该列的对齐文本居中. | Option | Description | |:------:| -----------:| | data | path to data files to supply the data that will be passed into templates. | | engine | engine to be used for processing templates. Handlebars is the default. | | ext | extension to be used for dest files. | 呈现的输出效果如下: Option Description data path to data files to supply the data that will be passed into templates. engine engine to be used for processing templates. Handlebars is the default. ext extension to be used for dest files. ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:10:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"11 链接 ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:11:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"基本链接 \u003chttps://assemble.io\u003e \u003ccontact@revolunet.com\u003e [Assemble](https://assemble.io) 呈现的输出效果如下 (将鼠标悬停在链接上，没有提示): https://assemble.io contact@revolunet.com Assemble 输出的 HTML 看起来像这样: \u003ca href=\"https://assemble.io\"\u003ehttps://assemble.io\u003c/a\u003e \u003ca href=\"mailto:contact@revolunet.com\"\u003econtact@revolunet.com\u003c/a\u003e \u003ca href=\"https://assemble.io\"\u003eAssemble\u003c/a\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:11:1","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"添加一个标题 [Upstage](https://github.com/upstage/ \"Visit Upstage!\") 呈现的输出效果如下 (将鼠标悬停在链接上，会有一行提示): Upstage 输出的 HTML 看起来像这样: \u003ca href=\"https://github.com/upstage/\" title=\"Visit Upstage!\"\u003eUpstage\u003c/a\u003e ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:11:2","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"定位标记 定位标记使你可以跳至同一页面上的指定锚点. 例如, 每个章节: ## Table of Contents * [Chapter 1](#chapter-1) * [Chapter 2](#chapter-2) * [Chapter 3](#chapter-3) 将跳转到这些部分: ## Chapter 1 \u003ca id=\"chapter-1\"\u003e\u003c/a\u003e Content for chapter one. ## Chapter 2 \u003ca id=\"chapter-2\"\u003e\u003c/a\u003e Content for chapter one. ## Chapter 3 \u003ca id=\"chapter-3\"\u003e\u003c/a\u003e Content for chapter one. 注意 定位标记的位置几乎是任意的. 因为它们并不引人注目, 所以它们通常被放在同一行了. ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:11:3","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"12 脚注 脚注使你可以添加注释和参考, 而不会使文档正文混乱. 当你创建脚注时, 会在添加脚注引用的位置出现带有链接的上标编号. 读者可以单击链接以跳至页面底部的脚注内容. 要创建脚注引用, 请在方括号中添加插入符号和标识符 ([^1]). 标识符可以是数字或单词, 但不能包含空格或制表符. 标识符仅将脚注引用与脚注本身相关联 - 在脚注输出中, 脚注按顺序编号. 在中括号内使用插入符号和数字以及用冒号和文本来添加脚注内容 ([^1]：这是一段脚注). 你不一定要在文档末尾添加脚注. 可以将它们放在除列表, 引用和表格等元素之外的任何位置. 这是一个数字脚注[^1]. 这是一个带标签的脚注[^label] [^1]: 这是一个数字脚注 [^label]: 这是一个带标签的脚注 这是一个数字脚注1. 这是一个带标签的脚注2 ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:12:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"13 图片 图片的语法与链接相似, 但包含一个在前面的感叹号. ![Minion](https://octodex.github.com/images/minion.png) 或者: ![Alt text](https://octodex.github.com/images/stormtroopocat.jpg \"The Stormtroopocat\") The Stormtroopocat 像链接一样, 图片也具有脚注样式的语法: ![Alt text][id] The Dojocat 稍后在文档中提供参考内容, 用来定义 URL 的位置: [id]: https://octodex.github.com/images/dojocat.jpg \"The Dojocat\" 技巧 LoveIt 主题提供了一个包含更多功能的 图片的 shortcode. 这是一个数字脚注 ↩︎ 这是一个带标签的脚注 ↩︎ ","date":"2019-12-01","objectID":"/basic-markdown-syntax/:13:0","tags":["Markdown","HTML"],"title":"Markdown 基本语法","uri":"/basic-markdown-syntax/"},{"categories":["Markdown"],"content":"Hugo 和 LoveIt 中的 Emoji 的用法指南.","date":"2019-10-01","objectID":"/emoji-support/","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"Emoji 可以通过多种方式在 Hugo 项目中启用. emojify 方法可以直接在模板中调用, 或者使用行内 Shortcodes. 要全局使用 emoji, 需要在你的网站配置中设置 enableEmoji 为 true, 然后你就可以直接在文章中输入 emoji 的代码. 它们以冒号开头和结尾，并且包含 emoji 的 代码: 去露营啦! :tent: 很快就回来. 真开心! :joy: 呈现的输出效果如下: 去露营啦! ⛺ 很快就回来. 真开心! 😂 以下符号清单是 emoji 代码的非常有用的参考. ","date":"2019-10-01","objectID":"/emoji-support/:0:0","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"表情与情感 ","date":"2019-10-01","objectID":"/emoji-support/:1:0","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"笑脸表情 图标 代码 图标 代码 😀 grinning 😃 smiley 😄 smile 😁 grin 😆 laughing satisfied 😅 sweat_smile 🤣 rofl 😂 joy 🙂 slightly_smiling_face 🙃 upside_down_face 😉 wink 😊 blush 😇 innocent ","date":"2019-10-01","objectID":"/emoji-support/:1:1","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"爱意表情 图标 代码 图标 代码 😍 heart_eyes 😘 kissing_heart 😗 kissing ☺️ relaxed 😚 kissing_closed_eyes 😙 kissing_smiling_eyes ","date":"2019-10-01","objectID":"/emoji-support/:1:2","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"吐舌头表情 图标 代码 图标 代码 😋 yum 😛 stuck_out_tongue 😜 stuck_out_tongue_winking_eye 😝 stuck_out_tongue_closed_eyes 🤑 money_mouth_face ","date":"2019-10-01","objectID":"/emoji-support/:1:3","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"带手的表情 图标 代码 图标 代码 🤗 hugs 🤔 thinking ","date":"2019-10-01","objectID":"/emoji-support/:1:4","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"中性表情 图标 代码 图标 代码 🤐 zipper_mouth_face 😐 neutral_face 😑 expressionless 😶 no_mouth 😏 smirk 😒 unamused 🙄 roll_eyes 😬 grimacing 🤥 lying_face ","date":"2019-10-01","objectID":"/emoji-support/:1:5","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"困倦的表情 图标 代码 图标 代码 😌 relieved 😔 pensive 😪 sleepy 🤤 drooling_face 😴 sleeping ","date":"2019-10-01","objectID":"/emoji-support/:1:6","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"不适的表情 图标 代码 图标 代码 😷 mask 🤒 face_with_thermometer 🤕 face_with_head_bandage 🤢 nauseated_face 🤧 sneezing_face 😵 dizzy_face ","date":"2019-10-01","objectID":"/emoji-support/:1:7","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"戴帽子的表情 图标 代码 图标 代码 🤠 cowboy_hat_face ","date":"2019-10-01","objectID":"/emoji-support/:1:8","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"戴眼镜的表情 图标 代码 图标 代码 😎 sunglasses 🤓 nerd_face ","date":"2019-10-01","objectID":"/emoji-support/:1:9","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"担心的表情 图标 代码 图标 代码 😕 confused 😟 worried 🙁 slightly_frowning_face ☹ frowning_face 😮 open_mouth 😯 hushed 😲 astonished 😳 flushed 😦 frowning 😧 anguished 😨 fearful 😰 cold_sweat 😥 disappointed_relieved 😢 cry 😭 sob 😱 scream 😖 confounded 😣 persevere 😞 disappointed 😓 sweat 😩 weary 😫 tired_face ","date":"2019-10-01","objectID":"/emoji-support/:1:10","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"否定的表情 图标 代码 图标 代码 😤 triumph 😡 pout rage 😠 angry 😈 smiling_imp 👿 imp 💀 skull ☠️ skull_and_crossbones ","date":"2019-10-01","objectID":"/emoji-support/:1:11","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"特殊打扮的表情 图标 代码 图标 代码 💩 hankey poop shit 🤡 clown_face 👹 japanese_ogre 👺 japanese_goblin 👻 ghost 👽 alien 👾 space_invader 🤖 robot ","date":"2019-10-01","objectID":"/emoji-support/:1:12","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"猫脸表情 图标 代码 图标 代码 😺 smiley_cat 😸 smile_cat 😹 joy_cat 😻 heart_eyes_cat 😼 smirk_cat 😽 kissing_cat 🙀 scream_cat 😿 crying_cat_face 😾 pouting_cat ","date":"2019-10-01","objectID":"/emoji-support/:1:13","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"猴脸表情 图标 代码 图标 代码 🙈 see_no_evil 🙉 hear_no_evil 🙊 speak_no_evil ","date":"2019-10-01","objectID":"/emoji-support/:1:14","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"情感 图标 代码 图标 代码 💋 kiss 💌 love_letter 💘 cupid 💝 gift_heart 💖 sparkling_heart 💗 heartpulse 💓 heartbeat 💞 revolving_hearts 💕 two_hearts 💟 heart_decoration ❣️ heavy_heart_exclamation 💔 broken_heart ❤️ heart 💛 yellow_heart 💚 green_heart 💙 blue_heart 💜 purple_heart 🖤 black_heart 💯 100 💢 anger 💥 boom collision 💫 dizzy 💦 sweat_drops 💨 dash 🕳️ hole 💣 bomb 💬 speech_balloon 👁️‍🗨️ eye_speech_bubble 🗯️ right_anger_bubble 💭 thought_balloon 💤 zzz ","date":"2019-10-01","objectID":"/emoji-support/:1:15","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"人与身体 ","date":"2019-10-01","objectID":"/emoji-support/:2:0","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"张开手掌的手势 图标 代码 图标 代码 👋 wave 🤚 raised_back_of_hand 🖐️ raised_hand_with_fingers_splayed ✋ hand raised_hand 🖖 vulcan_salute ","date":"2019-10-01","objectID":"/emoji-support/:2:1","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"部分手指的手势 图标 代码 图标 代码 👌 ok_hand ✌️ v 🤞 crossed_fingers 🤘 metal 🤙 call_me_hand ","date":"2019-10-01","objectID":"/emoji-support/:2:2","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"一根手指的手势 图标 代码 图标 代码 👈 point_left 👉 point_right 👆 point_up_2 🖕 fu middle_finger 👇 point_down ☝️ point_up ","date":"2019-10-01","objectID":"/emoji-support/:2:3","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"握紧的手势 图标 代码 图标 代码 👍 +1 thumbsup 👎 -1 thumbsdown ✊ fist fist_raised 👊 facepunch fist_oncoming punch 🤛 fist_left 🤜 fist_right ","date":"2019-10-01","objectID":"/emoji-support/:2:4","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"两只手 图标 代码 图标 代码 👏 clap 🙌 raised_hands 👐 open_hands 🤝 handshake 🙏 pray ","date":"2019-10-01","objectID":"/emoji-support/:2:5","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"握住东西的手势 图标 代码 图标 代码 ✍️ writing_hand 💅 nail_care 🤳 selfie ","date":"2019-10-01","objectID":"/emoji-support/:2:6","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"身体部位 图标 代码 图标 代码 💪 muscle 👂 ear 👃 nose 👀 eyes 👁️ eye 👅 tongue 👄 lips ","date":"2019-10-01","objectID":"/emoji-support/:2:7","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"人 图标 代码 图标 代码 👶 baby 👦 boy 👧 girl :blonde_man: blonde_man person_with_blond_hair 👨 man 👩 woman 👱‍♀️ blonde_woman 👴 older_man 👵 older_woman ","date":"2019-10-01","objectID":"/emoji-support/:2:8","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"身体动作 图标 代码 图标 代码 🙍‍♀️ frowning_woman person_frowning 🙍‍♂️ frowning_man 🙎‍♀️ person_with_pouting_face pouting_woman 🙎‍♂️ pouting_man 🙅‍♀️ ng_woman no_good no_good_woman 🙅‍♂️ ng_man no_good_man 🙆‍♀️ ok_woman 🙆‍♂️ ok_man 💁‍♀️ information_desk_person sassy_woman tipping_hand_woman 💁‍♂️ sassy_man tipping_hand_man 🙋‍♀️ raising_hand raising_hand_woman 🙋‍♂️ raising_hand_man 🙇 bow bowing_man 🙇‍♀️ bowing_woman 🤦‍♂️ man_facepalming 🤦‍♀️ woman_facepalming 🤷‍♂️ man_shrugging 🤷‍♀️ woman_shrugging ","date":"2019-10-01","objectID":"/emoji-support/:2:9","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"人物角色 图标 代码 图标 代码 👨‍⚕️ man_health_worker 👩‍⚕️ woman_health_worker 👨‍🎓 man_student 👩‍🎓 woman_student 👨‍🏫 man_teacher 👩‍🏫 woman_teacher 👨‍⚖️ man_judge 👩‍⚖️ woman_judge 👨‍🌾 man_farmer 👩‍🌾 woman_farmer 👨‍🍳 man_cook 👩‍🍳 woman_cook 👨‍🔧 man_mechanic 👩‍🔧 woman_mechanic 👨‍🏭 man_factory_worker 👩‍🏭 woman_factory_worker 👨‍💼 man_office_worker 👩‍💼 woman_office_worker 👨‍🔬 man_scientist 👩‍🔬 woman_scientist 👨‍💻 man_technologist 👩‍💻 woman_technologist 👨‍🎤 man_singer 👩‍🎤 woman_singer 👨‍🎨 man_artist 👩‍🎨 woman_artist 👨‍✈️ man_pilot 👩‍✈️ woman_pilot 👨‍🚀 man_astronaut 👩‍🚀 woman_astronaut 👨‍🚒 man_firefighter 👩‍🚒 woman_firefighter 👮‍♂️ cop policeman 👮‍♀️ policewoman 🕵 detective male_detective 🕵️‍♀️ female_detective 💂‍♂️ guardsman 💂‍♀️ guardswoman 👷‍♂️ construction_worker construction_worker_man 👷‍♀️ construction_worker_woman 🤴 prince 👸 princess 👳‍♂️ man_with_turban 👳‍♀️ woman_with_turban 👲 man_with_gua_pi_mao 🤵‍♂️ man_in_tuxedo 👰 bride_with_veil 🤰 pregnant_woman ","date":"2019-10-01","objectID":"/emoji-support/:2:10","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"幻想的人物 图标 代码 图标 代码 👼 angel 🎅 santa 🤶 mrs_claus ","date":"2019-10-01","objectID":"/emoji-support/:2:11","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"人物活动 图标 代码 图标 代码 💆‍♀️ massage massage_woman 💆‍♂️ massage_man 💇‍♀️ haircut haircut_woman 💇‍♂️ haircut_man 🚶‍♂️ walking walking_man 🚶‍♀️ walking_woman 🏃‍♂️ runner running running_man 🏃‍♀️ running_woman 💃 dancer 🕺 man_dancing 🕴️ business_suit_levitating 👯‍♀️ dancers dancing_women 👯‍♂️ dancing_men ","date":"2019-10-01","objectID":"/emoji-support/:2:12","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"体育 图标 代码 图标 代码 🤺 person_fencing 🏇 horse_racing ⛷️ skier 🏂 snowboarder 🏌️‍♂️ golfing_man 🏌️‍♀️ golfing_woman 🏄‍♂️ surfer surfing_man 🏄‍♀️ surfing_woman 🚣‍♂️ rowboat rowing_man 🚣‍♀️ rowing_woman 🏊‍♂️ swimmer swimming_man 🏊‍♀️ swimming_woman ⛹️‍♂️ basketball_man ⛹️‍♀️ basketball_woman 🏋️‍♂️ weight_lifting_man 🏋️‍♀️ weight_lifting_woman 🚴‍♂️ bicyclist biking_man 🚴‍♀️ biking_woman 🚵‍♂️ mountain_bicyclist mountain_biking_man 🚵‍♀️ mountain_biking_woman 🤸‍♂️ man_cartwheeling 🤸‍♀️ woman_cartwheeling 🤼‍♂️ men_wrestling 🤼‍♀️ women_wrestling 🤽‍♂️ man_playing_water_polo 🤽‍♀️ woman_playing_water_polo 🤾‍♂️ man_playing_handball 🤾‍♀️ woman_playing_handball 🤹‍♂️ man_juggling 🤹‍♀️ woman_juggling ","date":"2019-10-01","objectID":"/emoji-support/:2:13","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"休息 图标 代码 图标 代码 🛀 bath 🛌 sleeping_bed ","date":"2019-10-01","objectID":"/emoji-support/:2:14","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"家庭 图标 代码 图标 代码 👭 two_women_holding_hands 👫 couple 👬 two_men_holding_hands 👩‍❤️‍💋‍👨 couplekiss_man_woman 👨‍❤️‍💋‍👨 couplekiss_man_man 👩‍❤️‍💋‍👩 couplekiss_woman_woman 💑 couple_with_heart couple_with_heart_woman_man 👨‍❤️‍👨 couple_with_heart_man_man 👩‍❤️‍👩 couple_with_heart_woman_woman 👨‍👩‍👦 family family_man_woman_boy 👨‍👩‍👧 family_man_woman_girl 👨‍👩‍👧‍👦 family_man_woman_girl_boy 👨‍👩‍👦‍👦 family_man_woman_boy_boy 👨‍👩‍👧‍👧 family_man_woman_girl_girl 👨‍👨‍👦 family_man_man_boy 👨‍👨‍👧 family_man_man_girl 👨‍👨‍👧‍👦 family_man_man_girl_boy 👨‍👨‍👦‍👦 family_man_man_boy_boy 👨‍👨‍👧‍👧 family_man_man_girl_girl 👩‍👩‍👦 family_woman_woman_boy 👩‍👩‍👧 family_woman_woman_girl 👩‍👩‍👧‍👦 family_woman_woman_girl_boy 👩‍👩‍👦‍👦 family_woman_woman_boy_boy 👩‍👩‍👧‍👧 family_woman_woman_girl_girl 👨‍👦 family_man_boy 👨‍👦‍👦 family_man_boy_boy 👨‍👧 family_man_girl 👨‍👧‍👦 family_man_girl_boy 👨‍👧‍👧 family_man_girl_girl 👩‍👦 family_woman_boy 👩‍👦‍👦 family_woman_boy_boy 👩‍👧 family_woman_girl 👩‍👧‍👦 family_woman_girl_boy 👩‍👧‍👧 family_woman_girl_girl ","date":"2019-10-01","objectID":"/emoji-support/:2:15","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"人物符号 图标 代码 图标 代码 🗣 speaking_head 👤 bust_in_silhouette 👥 busts_in_silhouette 👣 footprints ","date":"2019-10-01","objectID":"/emoji-support/:2:16","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"动物与自然 ","date":"2019-10-01","objectID":"/emoji-support/:3:0","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"哺乳动物 图标 代码 图标 代码 🐵 monkey_face 🐒 monkey 🦍 gorilla 🐶 dog 🐕 dog2 🐩 poodle 🐺 wolf 🦊 fox_face 🐱 cat 🐈 cat2 🦁 lion 🐯 tiger 🐅 tiger2 🐆 leopard 🐴 horse 🐎 racehorse 🦄 unicorn 🦌 deer 🐮 cow 🐂 ox 🐃 water_buffalo 🐄 cow2 🐷 pig 🐖 pig2 🐗 boar 🐽 pig_nose 🐏 ram 🐑 sheep 🐐 goat 🐪 dromedary_camel 🐫 camel 🐘 elephant 🦏 rhinoceros 🐭 mouse 🐁 mouse2 🐀 rat 🐹 hamster 🐰 rabbit 🐇 rabbit2 🐿️ chipmunk 🦇 bat 🐻 bear 🐨 koala 🐼 panda_face 🐾 feet paw_prints ","date":"2019-10-01","objectID":"/emoji-support/:3:1","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"鸟类 图标 代码 图标 代码 🦃 turkey 🐔 chicken 🐓 rooster 🐣 hatching_chick 🐤 baby_chick 🐥 hatched_chick 🐦 bird 🐧 penguin 🕊 dove 🦅 eagle 🦆 duck 🦉 owl ","date":"2019-10-01","objectID":"/emoji-support/:3:2","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"两栖动物 icon code icon code 🐸 frog ","date":"2019-10-01","objectID":"/emoji-support/:3:3","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"爬虫类 图标 代码 图标 代码 🐊 crocodile 🐢 turtle 🦎 lizard 🐍 snake 🐲 dragon_face 🐉 dragon ","date":"2019-10-01","objectID":"/emoji-support/:3:4","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"海洋动物 图标 代码 图标 代码 🐳 whale 🐋 whale2 🐬 dolphin flipper 🐟 fish 🐠 tropical_fish 🐡 blowfish 🦈 shark 🐙 octopus 🐚 shell ","date":"2019-10-01","objectID":"/emoji-support/:3:5","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"虫类 图标 代码 图标 代码 🐌 snail 🦋 butterfly 🐛 bug 🐜 ant 🐝 bee honeybee 🪲 beetle 🕷️ spider 🕸️ spider_web 🦂 scorpion ","date":"2019-10-01","objectID":"/emoji-support/:3:6","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"花类植物 图标 代码 图标 代码 💐 bouquet 🌸 cherry_blossom 💮 white_flower 🏵️ rosette 🌹 rose 🥀 wilted_flower 🌺 hibiscus 🌻 sunflower 🌼 blossom 🌷 tulip ","date":"2019-10-01","objectID":"/emoji-support/:3:7","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"其它植物 图标 代码 图标 代码 🌱 seedling 🌲 evergreen_tree 🌳 deciduous_tree 🌴 palm_tree 🌵 cactus 🌾 ear_of_rice 🌿 herb ☘️ shamrock 🍀 four_leaf_clover 🍁 maple_leaf 🍂 fallen_leaf 🍃 leaves ","date":"2019-10-01","objectID":"/emoji-support/:3:8","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"食物与饮料 ","date":"2019-10-01","objectID":"/emoji-support/:4:0","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"水果 图标 代码 图标 代码 🍇 grapes 🍈 melon 🍉 watermelon 🍊 mandarin orange tangerine 🍋 lemon 🍌 banana 🍍 pineapple 🍎 apple 🍏 green_apple 🍐 pear 🍑 peach 🍒 cherries 🍓 strawberry 🥝 kiwi_fruit 🍅 tomato ","date":"2019-10-01","objectID":"/emoji-support/:4:1","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"蔬菜 图标 代码 图标 代码 🥑 avocado 🍆 eggplant 🥔 potato 🥕 carrot 🌽 corn 🌶️ hot_pepper 🥒 cucumber 🍄 mushroom 🥜 peanuts 🌰 chestnut ","date":"2019-10-01","objectID":"/emoji-support/:4:2","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"快餐 图标 代码 图标 代码 🍞 bread 🥐 croissant 🥖 baguette_bread 🥞 pancakes 🧀 cheese 🍖 meat_on_bone 🍗 poultry_leg 🥓 bacon 🍔 hamburger 🍟 fries 🍕 pizza 🌭 hotdog 🌮 taco 🌯 burrito 🥙 stuffed_flatbread 🥚 egg 🍳 fried_egg 🥘 shallow_pan_of_food 🍲 stew 🥗 green_salad 🍿 popcorn ","date":"2019-10-01","objectID":"/emoji-support/:4:3","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"亚洲食物 图标 代码 图标 代码 🍱 bento 🍘 rice_cracker 🍙 rice_ball 🍚 rice 🍛 curry 🍜 ramen 🍝 spaghetti 🍠 sweet_potato 🍢 oden 🍣 sushi 🍤 fried_shrimp 🍥 fish_cake 🍡 dango ","date":"2019-10-01","objectID":"/emoji-support/:4:4","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"海鲜 图标 代码 图标 代码 🦀 crab 🦐 shrimp 🦑 squid ","date":"2019-10-01","objectID":"/emoji-support/:4:5","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"甜点 图标 代码 图标 代码 🍦 icecream 🍧 shaved_ice 🍨 ice_cream 🍩 doughnut 🍪 cookie 🎂 birthday 🍰 cake 🍫 chocolate_bar 🍬 candy 🍭 lollipop 🍮 custard 🍯 honey_pot ","date":"2019-10-01","objectID":"/emoji-support/:4:6","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"饮料 图标 代码 图标 代码 🍼 baby_bottle 🥛 milk_glass ☕ coffee 🍵 tea 🍶 sake 🍾 champagne 🍷 wine_glass 🍸 cocktail 🍹 tropical_drink 🍺 beer 🍻 beers 🥂 clinking_glasses 🥃 tumbler_glass ","date":"2019-10-01","objectID":"/emoji-support/:4:7","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"餐具 图标 代码 图标 代码 🍽️ plate_with_cutlery 🍴 fork_and_knife 🥄 spoon 🔪 hocho knife 🏺 amphora ","date":"2019-10-01","objectID":"/emoji-support/:4:8","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"旅游与地理 ","date":"2019-10-01","objectID":"/emoji-support/:5:0","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"地图 图标 代码 图标 代码 🌍 earth_africa 🌎 earth_americas 🌏 earth_asia 🌐 globe_with_meridians 🗺️ world_map 🗾 japan ","date":"2019-10-01","objectID":"/emoji-support/:5:1","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"地理现象 图标 代码 图标 代码 🏔 mountain_snow ⛰️ mountain 🌋 volcano 🗻 mount_fuji 🏕️ camping ⛱ beach_umbrella 🏜️ desert 🏝️ desert_island 🏞️ national_park ","date":"2019-10-01","objectID":"/emoji-support/:5:2","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"建筑物 图标 代码 图标 代码 🏟️ stadium 🏛️ classical_building 🏗️ building_construction 🏘 houses 🏚 derelict_house 🏠 house 🏡 house_with_garden 🏢 office 🏣 post_office 🏤 european_post_office 🏥 hospital 🏦 bank 🏨 hotel 🏩 love_hotel 🏪 convenience_store 🏫 school 🏬 department_store 🏭 factory 🏯 japanese_castle 🏰 european_castle 💒 wedding 🗼 tokyo_tower 🗽 statue_of_liberty ","date":"2019-10-01","objectID":"/emoji-support/:5:3","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"宗教建筑 图标 代码 图标 代码 ⛪ church 🕌 mosque 🕍 synagogue ⛩️ shinto_shrine 🕋 kaaba ","date":"2019-10-01","objectID":"/emoji-support/:5:4","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"其它地点 图标 代码 图标 代码 ⛲ fountain ⛺ tent 🌁 foggy 🌃 night_with_stars 🏙️ cityscape 🌄 sunrise_over_mountains 🌅 sunrise 🌆 city_sunset 🌇 city_sunrise 🌉 bridge_at_night ♨️ hotsprings 🎠 carousel_horse 🎡 ferris_wheel 🎢 roller_coaster 💈 barber 🎪 circus_tent ","date":"2019-10-01","objectID":"/emoji-support/:5:5","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"陆路运输 图标 代码 图标 代码 🚂 steam_locomotive 🚃 railway_car 🚄 bullettrain_side 🚅 bullettrain_front 🚆 train2 🚇 metro 🚈 light_rail 🚉 station 🚊 tram 🚝 monorail 🚞 mountain_railway 🚋 train 🚌 bus 🚍 oncoming_bus 🚎 trolleybus 🚐 minibus 🚑 ambulance 🚒 fire_engine 🚓 police_car 🚔 oncoming_police_car 🚕 taxi 🚖 oncoming_taxi 🚗 car red_car 🚘 oncoming_automobile 🚙 blue_car 🚚 truck 🚛 articulated_lorry 🚜 tractor 🏎️ racing_car 🏍 motorcycle 🛵 motor_scooter 🚲 bike 🛴 kick_scooter 🚏 busstop 🛣️ motorway 🛤️ railway_track 🛢️ oil_drum ⛽ fuelpump 🚨 rotating_light 🚥 traffic_light 🚦 vertical_traffic_light 🛑 stop_sign 🚧 construction ","date":"2019-10-01","objectID":"/emoji-support/:5:6","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"水路运输 图标 代码 图标 代码 ⚓ anchor ⛵ boat sailboat 🛶 canoe 🚤 speedboat 🛳️ passenger_ship ⛴️ ferry 🛥️ motor_boat 🚢 ship ","date":"2019-10-01","objectID":"/emoji-support/:5:7","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"空中运输 图标 代码 图标 代码 ✈️ airplane 🛩️ small_airplane 🛫 flight_departure 🛬 flight_arrival 💺 seat 🚁 helicopter 🚟 suspension_railway 🚠 mountain_cableway 🚡 aerial_tramway 🛰️ artificial_satellite 🚀 rocket ","date":"2019-10-01","objectID":"/emoji-support/:5:8","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"旅馆 icon code icon code 🛎️ bellhop_bell ","date":"2019-10-01","objectID":"/emoji-support/:5:9","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"时间 图标 代码 图标 代码 ⌛ hourglass ⏳ hourglass_flowing_sand ⌚ watch ⏰ alarm_clock ⏱️ stopwatch ⏲️ timer_clock 🕰️ mantelpiece_clock 🕛 clock12 🕧 clock1230 🕐 clock1 🕜 clock130 🕑 clock2 🕝 clock230 🕒 clock3 🕞 clock330 🕓 clock4 🕟 clock430 🕔 clock5 🕠 clock530 🕕 clock6 🕡 clock630 🕖 clock7 🕢 clock730 🕗 clock8 🕣 clock830 🕘 clock9 🕤 clock930 🕙 clock10 🕥 clock1030 🕚 clock11 🕦 clock1130 ","date":"2019-10-01","objectID":"/emoji-support/:5:10","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"天空与天气 图标 代码 图标 代码 🌑 new_moon 🌒 waxing_crescent_moon 🌓 first_quarter_moon 🌔 moon waxing_gibbous_moon 🌕 full_moon 🌖 waning_gibbous_moon 🌗 last_quarter_moon 🌘 waning_crescent_moon 🌙 crescent_moon 🌚 new_moon_with_face 🌛 first_quarter_moon_with_face 🌜 last_quarter_moon_with_face 🌡️ thermometer ☀️ sunny 🌝 full_moon_with_face 🌞 sun_with_face ⭐ star 🌟 star2 🌠 stars 🌌 milky_way ☁️ cloud ⛅ partly_sunny ⛈ cloud_with_lightning_and_rain 🌤 sun_behind_small_cloud 🌥 sun_behind_large_cloud 🌦 sun_behind_rain_cloud 🌧 cloud_with_rain 🌨 cloud_with_snow 🌩 cloud_with_lightning 🌪️ tornado 🌫️ fog 🌬 wind_face 🌀 cyclone 🌈 rainbow 🌂 closed_umbrella ☂️ open_umbrella ☂️ umbrella ⛱️ parasol_on_ground ⚡ zap ❄️ snowflake ☃️ snowman_with_snow ☃️ snowman ☄️ comet 🔥 fire 💧 droplet 🌊 ocean ","date":"2019-10-01","objectID":"/emoji-support/:5:11","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"活动 ","date":"2019-10-01","objectID":"/emoji-support/:6:0","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"事件 图标 代码 图标 代码 🎃 jack_o_lantern 🎄 christmas_tree 🎆 fireworks 🎇 sparkler ✨ sparkles 🎈 balloon 🎉 tada 🎊 confetti_ball 🎋 tanabata_tree 🎍 bamboo 🎎 dolls 🎏 flags 🎐 wind_chime 🎑 rice_scene 🎀 ribbon 🎁 gift 🎗️ reminder_ribbon 🎟 tickets 🎫 ticket ","date":"2019-10-01","objectID":"/emoji-support/:6:1","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"奖杯与奖牌 图标 代码 图标 代码 🎖️ medal_military 🏆 trophy 🏅 medal_sports 🥇 1st_place_medal 🥈 2nd_place_medal 🥉 3rd_place_medal ","date":"2019-10-01","objectID":"/emoji-support/:6:2","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"体育运动 图标 代码 图标 代码 ⚽ soccer ⚾ baseball 🏀 basketball 🏐 volleyball 🏈 football 🏉 rugby_football 🎾 tennis 🎳 bowling 🦗 cricket 🏑 field_hockey 🏒 ice_hockey 🏓 ping_pong 🏸 badminton 🥊 boxing_glove 🥋 martial_arts_uniform 🥅 goal_net ⛳ golf ⛸️ ice_skate 🎣 fishing_pole_and_fish 🎽 running_shirt_with_sash 🎿 ski ","date":"2019-10-01","objectID":"/emoji-support/:6:3","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"游戏 图标 代码 图标 代码 🎯 dart 🎱 8ball 🔮 crystal_ball 🎮 video_game 🕹️ joystick 🎰 slot_machine 🎲 game_die ♠️ spades ♥️ hearts ♦️ diamonds ♣️ clubs 🃏 black_joker 🀄 mahjong 🎴 flower_playing_cards ","date":"2019-10-01","objectID":"/emoji-support/:6:4","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"艺术与工艺 图标 代码 图标 代码 🎭 performing_arts 🖼 framed_picture 🎨 art ","date":"2019-10-01","objectID":"/emoji-support/:6:5","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"物品 ","date":"2019-10-01","objectID":"/emoji-support/:7:0","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"服装 图标 代码 图标 代码 👓 eyeglasses 🕶️ dark_sunglasses 👔 necktie 👕 shirt tshirt 👖 jeans 👗 dress 👘 kimono 👙 bikini 👚 womans_clothes 👛 purse 👜 handbag 👝 pouch 🛍️ shopping 🎒 school_satchel 👞 mans_shoe shoe 👟 athletic_shoe 👠 high_heel 👡 sandal 👢 boot 👑 crown 👒 womans_hat 🎩 tophat 🎓 mortar_board ⛑️ rescue_worker_helmet 📿 prayer_beads 💄 lipstick 💍 ring 💎 gem ","date":"2019-10-01","objectID":"/emoji-support/:7:1","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"声音 图标 代码 图标 代码 🔇 mute 🔈 speaker 🔉 sound 🔊 loud_sound 📢 loudspeaker 📣 mega 📯 postal_horn 🔔 bell 🔕 no_bell ","date":"2019-10-01","objectID":"/emoji-support/:7:2","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"音乐 图标 代码 图标 代码 🎼 musical_score 🎵 musical_note 🎶 notes 🎙️ studio_microphone 🎚️ level_slider 🎛️ control_knobs 🎤 microphone 🎧 headphones 📻 radio ","date":"2019-10-01","objectID":"/emoji-support/:7:3","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"乐器 图标 代码 图标 代码 🎷 saxophone 🎸 guitar 🎹 musical_keyboard 🎺 trumpet 🎻 violin 🥁 drum ","date":"2019-10-01","objectID":"/emoji-support/:7:4","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"电话 图标 代码 图标 代码 📱 iphone 📲 calling ☎️ phone telephone 📞 telephone_receiver 📟 pager 📠 fax ","date":"2019-10-01","objectID":"/emoji-support/:7:5","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"电脑 图标 代码 图标 代码 🔋 battery 🔌 electric_plug 💻 computer 🖥️ desktop_computer 🖨️ printer ⌨️ keyboard 🖱 computer_mouse 🖲️ trackball 💽 minidisc 💾 floppy_disk 💿 cd 📀 dvd ","date":"2019-10-01","objectID":"/emoji-support/:7:6","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"灯光与影像 图标 代码 图标 代码 🎥 movie_camera 🎞️ film_strip 📽️ film_projector 🎬 clapper 📺 tv 📷 camera 📸 camera_flash 📹 video_camera 📼 vhs 🔍 mag 🔎 mag_right 🕯️ candle 💡 bulb 🔦 flashlight 🏮 izakaya_lantern lantern ","date":"2019-10-01","objectID":"/emoji-support/:7:7","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"书与纸张 图标 代码 图标 代码 📔 notebook_with_decorative_cover 📕 closed_book 📖 book open_book 📗 green_book 📘 blue_book 📙 orange_book 📚 books 📓 notebook 📒 ledger 📃 page_with_curl 📜 scroll 📄 page_facing_up 📰 newspaper 🗞️ newspaper_roll 📑 bookmark_tabs 🔖 bookmark 🏷️ label ","date":"2019-10-01","objectID":"/emoji-support/:7:8","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"钱 图标 代码 图标 代码 💰 moneybag 💴 yen 💵 dollar 💶 euro 💷 pound 💸 money_with_wings 💳 credit_card 💹 chart ","date":"2019-10-01","objectID":"/emoji-support/:7:9","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"邮件 图标 代码 图标 代码 ✉️ email envelope 📧 📧 📨 incoming_envelope 📩 envelope_with_arrow 📤 outbox_tray 📥 inbox_tray 📦 package 📫 mailbox 📪 mailbox_closed 📬 mailbox_with_mail 📭 mailbox_with_no_mail 📮 postbox 🗳 ballot_box ","date":"2019-10-01","objectID":"/emoji-support/:7:10","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"书写 图标 代码 图标 代码 ✏️ pencil2 ✒️ black_nib 🖋 fountain_pen 🖊 pen 🖌 paintbrush 🖍 crayon 📝 memo pencil ","date":"2019-10-01","objectID":"/emoji-support/:7:11","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"办公 图标 代码 图标 代码 💼 briefcase 📁 file_folder 📂 open_file_folder 🗂️ card_index_dividers 📅 date 📆 calendar 🗒 spiral_notepad 🗓 spiral_calendar 📇 card_index 📈 chart_with_upwards_trend 📉 chart_with_downwards_trend 📊 bar_chart 📋 clipboard 📌 pushpin 📍 round_pushpin 📎 paperclip 🖇 paperclips 📏 straight_ruler 📐 triangular_ruler ✂️ scissors 🗃️ card_file_box 🗄️ file_cabinet 🗑️ wastebasket ","date":"2019-10-01","objectID":"/emoji-support/:7:12","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"锁 图标 代码 图标 代码 🔒 lock 🔓 unlock 🔏 lock_with_ink_pen 🔐 closed_lock_with_key 🔑 key 🗝️ old_key ","date":"2019-10-01","objectID":"/emoji-support/:7:13","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"工具 图标 代码 图标 代码 🔨 hammer ⛏️ pick ⚒️ hammer_and_pick 🛠️ hammer_and_wrench 🗡 dagger ⚔️ crossed_swords 🔫 gun 🏹 bow_and_arrow 🛡️ shield 🔧 wrench 🔩 nut_and_bolt ⚙️ gear 🗜 clamp ⚖ balance_scale 🔗 link ⛓️ chains ","date":"2019-10-01","objectID":"/emoji-support/:7:14","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"科学 图标 代码 图标 代码 ⚗️ alembic 🔬 microscope 🔭 telescope 🛰️ satellite ","date":"2019-10-01","objectID":"/emoji-support/:7:15","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"医疗 图标 代码 图标 代码 💉 syringe 💊 pill ","date":"2019-10-01","objectID":"/emoji-support/:7:16","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"生活用品 图标 代码 图标 代码 🚪 door 🛏️ bed 🛋️ couch_and_lamp 🚽 toilet 🚿 shower 🛁 bathtub 🛒 shopping_cart ","date":"2019-10-01","objectID":"/emoji-support/:7:17","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"其它物品 图标 代码 图标 代码 🚬 smoking ⚰️ coffin ⚱️ funeral_urn 🗿 moyai ","date":"2019-10-01","objectID":"/emoji-support/:7:18","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"符号 ","date":"2019-10-01","objectID":"/emoji-support/:8:0","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"交通标识 图标 代码 图标 代码 🏧 atm 🚮 put_litter_in_its_place 🚰 potable_water ♿ wheelchair 🚹 mens 🚺 womens 🚻 restroom 🚼 baby_symbol 🚾 wc 🛂 passport_control 🛃 customs 🛄 baggage_claim 🛅 left_luggage ","date":"2019-10-01","objectID":"/emoji-support/:8:1","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"警告 图标 代码 图标 代码 ⚠️ warning 🚸 children_crossing ⛔ no_entry 🚫 no_entry_sign 🚳 no_bicycles 🚭 no_smoking 🚯 do_not_litter 🚱 🚱 🚷 no_pedestrians 📵 no_mobile_phones 🔞 underage ☢ radioactive ☣ biohazard ","date":"2019-10-01","objectID":"/emoji-support/:8:2","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"箭头 图标 代码 图标 代码 ⬆️ arrow_up ↗️ arrow_upper_right ➡️ arrow_right ↘️ arrow_lower_right ⬇️ arrow_down ↙️ arrow_lower_left ⬅️ arrow_left ↖️ arrow_upper_left ↕️ arrow_up_down ↔️ left_right_arrow ↩️ leftwards_arrow_with_hook ↪️ arrow_right_hook ⤴️ arrow_heading_up ⤵️ arrow_heading_down 🔃 arrows_clockwise 🔄 arrows_counterclockwise 🔙 back 🔚 end 🔛 on 🔜 soon 🔝 top ","date":"2019-10-01","objectID":"/emoji-support/:8:3","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"宗教 图标 代码 图标 代码 🛐 place_of_worship ⚛️ atom_symbol 🕉 om ✡️ star_of_david ☸️ wheel_of_dharma ☯️ yin_yang ✝️ latin_cross ☦️ orthodox_cross ☪️ star_and_crescent ☮️ peace_symbol 🕎 menorah 🔯 six_pointed_star ","date":"2019-10-01","objectID":"/emoji-support/:8:4","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"生肖 图标 代码 图标 代码 ♈ aries ♉ taurus ♊ gemini ♋ cancer ♌ leo ♍ virgo ♎ libra ♏ scorpius ♐ sagittarius ♑ capricorn ♒ aquarius ♓ pisces ⛎ ophiuchus ","date":"2019-10-01","objectID":"/emoji-support/:8:5","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"影像符号 图标 代码 图标 代码 🔀 twisted_rightwards_arrows 🔁 repeat 🔂 repeat_one ▶️ arrow_forward ⏩ fast_forward ⏭ next_track_button ⏯ play_or_pause_button ◀️ arrow_backward ⏪ rewind ⏮️ previous_track_button 🔼 arrow_up_small ⏫ arrow_double_up 🔽 arrow_down_small ⏬ arrow_double_down ⏸ pause_button ⏹ stop_button ⏺ record_button 🎦 cinema 🔅 low_brightness 🔆 high_brightness 📶 signal_strength 📳 vibration_mode 📴 mobile_phone_off ","date":"2019-10-01","objectID":"/emoji-support/:8:6","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"数学 图标 代码 图标 代码 ✖️ heavy_multiplication_x ➕ heavy_plus_sign ➖ heavy_minus_sign ➗ heavy_division_sign ","date":"2019-10-01","objectID":"/emoji-support/:8:7","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"标点符号 图标 代码 图标 代码 ‼️ bangbang ⁉️ interrobang ❓ question ❔ grey_question ❕ grey_exclamation ❗ exclamation heavy_exclamation_mark 〰️ wavy_dash ","date":"2019-10-01","objectID":"/emoji-support/:8:8","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"货币 图标 代码 图标 代码 💱 currency_exchange 💲 heavy_dollar_sign ","date":"2019-10-01","objectID":"/emoji-support/:8:9","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"按键符号 图标 代码 图标 代码 #️⃣ hash *️⃣ asterisk 0️⃣ zero 1️⃣ one 2️⃣ two 3️⃣ three 4️⃣ four 5️⃣ five 6️⃣ six 7️⃣ seven 8️⃣ eight 9️⃣ nine 🔟 keycap_ten ","date":"2019-10-01","objectID":"/emoji-support/:8:10","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"字母符号 图标 代码 图标 代码 🔠 capital_abcd 🔡 abcd 🔢 1234 🔣 symbols 🔤 abc 🅰️ a 🆎 ab 🅱️ b 🆑 cl 🆒 cool 🆓 free ℹ️ information_source 🆔 id ⓜ️ m 🆕 new 🆖 ng 🅾️ o2 🆗 ok 🅿️ parking 🆘 sos 🆙 up 🆚 vs 🈁 koko 🈂️ sa 🈷️ u6708 🈶 u6709 🈯 u6307 🉐 ideograph_advantage 🈹 u5272 🈚 u7121 🈲 u7981 🉑 accept 🈸 u7533 🈴 u5408 🈳 u7a7a ㊗️ congratulations ㊙️ secret 🈺 u55b6 🈵 u6e80 ","date":"2019-10-01","objectID":"/emoji-support/:8:11","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"几何符号 图标 代码 图标 代码 🔴 red_circle 🔵 large_blue_circle ⚫ black_circle ⚪ white_circle ⬛ black_large_square ⬜ white_large_square ◼️ black_medium_square ◻️ white_medium_square ◾ black_medium_small_square ◽ white_medium_small_square ▪️ black_small_square ▫️ white_small_square 🔶 large_orange_diamond 🔷 large_blue_diamond 🔸 small_orange_diamond 🔹 small_blue_diamond 🔺 small_red_triangle 🔻 small_red_triangle_down 💠 diamond_shape_with_a_dot_inside 🔘 radio_button 🔳 white_square_button 🔲 black_square_button ","date":"2019-10-01","objectID":"/emoji-support/:8:12","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"其它符合 图标 代码 图标 代码 ♻️ recycle ⚜️ fleur_de_lis 🔱 trident 📛 name_badge 🔰 beginner ⭕ o ✅ white_check_mark ☑️ ballot_box_with_check ✔️ heavy_check_mark ❌ x ❎ negative_squared_cross_mark ➰ curly_loop ➿ loop 〽️ part_alternation_mark ✳️ eight_spoked_asterisk ✴️ eight_pointed_black_star ❇️ sparkle ©️ copyright ®️ registered ™️ tm ","date":"2019-10-01","objectID":"/emoji-support/:8:13","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"旗帜 ","date":"2019-10-01","objectID":"/emoji-support/:9:0","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"常用旗帜 图标 代码 图标 代码 🏁 checkered_flag 🚩 triangular_flag_on_post 🎌 crossed_flags 🏴 black_flag 🏳 white_flag 🏳️‍🌈 rainbow_flag ","date":"2019-10-01","objectID":"/emoji-support/:9:1","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":["Markdown"],"content":"国家和地区旗帜 图标 代码 图标 代码 🇦🇩 andorra 🇦🇪 united_arab_emirates 🇦🇫 afghanistan 🇦🇬 antigua_barbuda 🇦🇮 anguilla 🇦🇱 albania 🇦🇲 armenia 🇦🇴 angola 🇦🇶 antarctica 🇦🇷 argentina 🇦🇸 american_samoa 🇦🇹 austria 🇦🇺 australia 🇦🇼 aruba 🇦🇽 aland_islands 🇦🇿 azerbaijan 🇧🇦 bosnia_herzegovina 🇧🇧 barbados 🇧🇩 bangladesh 🇧🇪 belgium 🇧🇫 burkina_faso 🇧🇬 bulgaria 🇧🇭 bahrain 🇧🇮 burundi 🇧🇯 benin 🇧🇱 st_barthelemy 🇧🇲 bermuda 🇧🇳 brunei 🇧🇴 bolivia 🇧🇶 caribbean_netherlands 🇧🇷 brazil 🇧🇸 bahamas 🇧🇹 bhutan 🇧🇼 botswana 🇧🇾 belarus 🇧🇿 belize 🇨🇦 canada 🇨🇨 cocos_islands 🇨🇩 congo_kinshasa 🇨🇫 central_african_republic 🇨🇬 congo_brazzaville 🇨🇭 switzerland 🇨🇮 cote_divoire 🇨🇰 cook_islands 🇨🇱 chile 🇨🇲 cameroon 🇨🇳 cn 🇨🇴 colombia 🇨🇷 costa_rica 🇨🇺 cuba 🇨🇻 cape_verde 🇨🇼 curacao 🇨🇽 christmas_island 🇨🇾 cyprus 🇨🇿 czech_republic 🇩🇪 de 🇩🇯 djibouti 🇩🇰 denmark 🇩🇲 dominica 🇩🇴 dominican_republic 🇩🇿 algeria 🇪🇨 ecuador 🇪🇪 estonia 🇪🇬 egypt 🇪🇭 western_sahara 🇪🇷 eritrea 🇪🇸 es 🇪🇹 ethiopia 🇪🇺 eu european_union 🇫🇮 finland 🇫🇯 fiji 🇫🇰 falkland_islands 🇫🇲 micronesia 🇫🇴 faroe_islands 🇫🇷 fr 🇬🇦 gabon 🇬🇧 gb uk 🇬🇩 grenada 🇬🇪 georgia 🇬🇫 french_guiana 🇬🇬 guernsey 🇬🇭 ghana 🇬🇮 gibraltar 🇬🇱 greenland 🇬🇲 gambia 🇬🇳 guinea 🇬🇵 guadeloupe 🇬🇶 equatorial_guinea 🇬🇷 greece 🇬🇸 south_georgia_south_sandwich_islands 🇬🇹 guatemala 🇬🇺 guam 🇬🇼 guinea_bissau 🇬🇾 guyana 🇭🇰 hong_kong 🇭🇳 honduras 🇭🇷 croatia 🇭🇹 haiti 🇭🇺 hungary 🇮🇨 canary_islands 🇮🇩 indonesia 🇮🇪 ireland 🇮🇱 israel 🇮🇲 isle_of_man 🇮🇳 india 🇮🇴 british_indian_ocean_territory 🇮🇶 iraq 🇮🇷 iran 🇮🇸 iceland 🇮🇹 it 🇯🇪 jersey 🇯🇲 jamaica 🇯🇴 jordan 🇯🇵 jp 🇰🇪 kenya 🇰🇬 kyrgyzstan 🇰🇭 cambodia 🇰🇮 kiribati 🇰🇲 comoros 🇰🇳 st_kitts_nevis 🇰🇵 north_korea 🇰🇷 kr 🇰🇼 kuwait 🇰🇾 cayman_islands 🇰🇿 kazakhstan 🇱🇦 laos 🇱🇧 lebanon 🇱🇨 st_lucia 🇱🇮 liechtenstein 🇱🇰 sri_lanka 🇱🇷 liberia 🇱🇸 lesotho 🇱🇹 lithuania 🇱🇺 luxembourg 🇱🇻 latvia 🇱🇾 libya 🇲🇦 morocco 🇲🇨 monaco 🇲🇩 moldova 🇲🇪 montenegro 🇲🇬 madagascar 🇲🇭 marshall_islands 🇲🇰 macedonia 🇲🇱 mali 🇲🇲 myanmar 🇲🇳 mongolia 🇲🇴 macau 🇲🇵 northern_mariana_islands 🇲🇶 martinique 🇲🇷 mauritania 🇲🇸 montserrat 🇲🇹 malta 🇲🇺 mauritius 🇲🇻 maldives 🇲🇼 malawi 🇲🇽 mexico 🇲🇾 malaysia 🇲🇿 mozambique 🇳🇦 namibia 🇳🇨 new_caledonia 🇳🇪 niger 🇳🇫 norfolk_island 🇳🇬 nigeria 🇳🇮 nicaragua 🇳🇱 netherlands 🇳🇴 norway 🇳🇵 nepal 🇳🇷 nauru 🇳🇺 niue 🇳🇿 new_zealand 🇴🇲 oman 🇵🇦 panama 🇵🇪 peru 🇵🇫 french_polynesia 🇵🇬 papua_new_guinea 🇵🇭 philippines 🇵🇰 pakistan 🇵🇱 poland 🇵🇲 st_pierre_miquelon 🇵🇳 pitcairn_islands 🇵🇷 puerto_rico 🇵🇸 palestinian_territories 🇵🇹 portugal 🇵🇼 palau 🇵🇾 paraguay 🇶🇦 qatar 🇷🇪 reunion 🇷🇴 romania 🇷🇸 serbia 🇷🇺 ru 🇷🇼 rwanda 🇸🇦 saudi_arabia 🇸🇧 solomon_islands 🇸🇨 seychelles 🇸🇩 sudan 🇸🇪 sweden 🇸🇬 singapore 🇸🇭 st_helena 🇸🇮 slovenia 🇸🇰 slovakia 🇸🇱 sierra_leone 🇸🇲 san_marino 🇸🇳 senegal 🇸🇴 somalia 🇸🇷 suriname 🇸🇸 south_sudan 🇸🇹 sao_tome_principe 🇸🇻 el_salvador 🇸🇽 sint_maarten 🇸🇾 syria 🇸🇿 swaziland 🇹🇨 turks_caicos_islands 🇹🇩 chad 🇹🇫 french_southern_territories 🇹🇬 togo 🇹🇭 thailand 🇹🇯 tajikistan 🇹🇰 tokelau 🇹🇱 timor_leste 🇹🇲 turkmenistan 🇹🇳 tunisia 🇹🇴 tonga 🇹🇷 tr 🇹🇹 trinidad_tobago 🇹🇻 tuvalu 🇹🇼 taiwan 🇹🇿 tanzania 🇺🇦 ukraine 🇺🇬 uganda 🇺🇸 us 🇺🇾 uruguay 🇺🇿 uzbekistan 🇻🇦 vatican_city 🇻🇨 st_vincent_grenadines 🇻🇪 venezuela 🇻🇬 british_virgin_islands 🇻🇮 us_virgin_islands 🇻🇳 vietnam 🇻🇺 vanuatu 🇼🇫 wallis_futuna 🇼🇸 samoa 🇽🇰 kosovo 🇾🇪 yemen 🇾🇹 mayotte 🇿🇦 south_africa 🇿🇲 zambia 🇿🇼 zimbabwe ","date":"2019-10-01","objectID":"/emoji-support/:9:2","tags":["emoji"],"title":"Emoji 支持","uri":"/emoji-support/"},{"categories":null,"content":" Cubes's Blog 这是一个分享IT技术的小站。 ","date":"0001-01-01","objectID":"/links/:0:0","tags":null,"title":"友链","uri":"/links/"}]