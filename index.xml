<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Monoya Blog</title><link>https://monoya.top/</link><description>Recent content on Monoya Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-hans</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Fri, 12 Mar 2021 16:12:52 +0000</lastBuildDate><atom:link href="https://monoya.top/index.xml" rel="self" type="application/rss+xml"/><item><title>About Me</title><link>https://monoya.top/about-me/</link><pubDate>Fri, 17 Sep 2021 00:00:00 +0000</pubDate><guid>https://monoya.top/about-me/</guid><description>Hi, I’m @lqgl I’m interested in Java, Go I’m currently learning &amp;hellip; I’m looking to collaborate on &amp;hellip; How to reach me &amp;hellip; Learn more and contribute on GitHub.</description></item><item><title>Jrebel 完美激活</title><link>https://monoya.top/kit/jrebel-%E5%AE%8C%E7%BE%8E%E6%BF%80%E6%B4%BB/</link><pubDate>Fri, 12 Mar 2021 16:12:52 +0000</pubDate><guid>https://monoya.top/kit/jrebel-%E5%AE%8C%E7%BE%8E%E6%BF%80%E6%B4%BB/</guid><description>服务器地址监听服务器地址： http://jrebel.cicoding.cn
GUID生成器： http://jrebel.cicoding.cn/guid
生成的格式： http://jrebel.cicoding.cn/BAA48E18-786D-853B-C4BF-AB31F79CAEFF
# 参考文档 JRebel激活破解完美解决方式 - (Play) - 博客园 (cnblogs.com)</description></item><item><title>Ubuntu20.04安装MongoDB</title><link>https://monoya.top/linux-post/ubuntu%E4%B8%8B%E5%AE%89%E8%A3%85mongodb/</link><pubDate>Mon, 08 Mar 2021 00:00:00 +0000</pubDate><guid>https://monoya.top/linux-post/ubuntu%E4%B8%8B%E5%AE%89%E8%A3%85mongodb/</guid><description>本教程描述了如何在Ubuntu20.04上安装MongoDB4.4
安装MongoDB Ubuntu 20.04默认存储库中不提供最新版本的MongoDB，因此需要在系统中添加官方的MongoDB存储库。
首先安装gnupg软件包 sudo apt-get install gnupg 导入包管理系统使用的公钥 wget -qO - https://www.mongodb.org/static/pgp/server-4.4.asc | sudo apt-key add - 添加MongoDB存储库 echo &amp;#34;deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu bionic/mongodb-org/4.4 multiverse&amp;#34; | sudo tee /etc/apt/sources.list.d/mongodb-org-4.4.list 更新存储库 sudo apt-get update 使用以下命令安装MongoDB sudo apt install mongodb-org 启动MongoDB服务 启动MongoDB，同时使用以下命令使其在重新启动时启动
sudo systemctl start mongod.service sudo systemctl enable mongod 检查MongoDB服务的状态 sudo systemctl status mongod 输出内容如下：
● mongod.service - MongoDB Database Server Loaded: loaded (/lib/systemd/system/mongod.service; disabled; vendor preset: enabled) Active: active (running) since Sun 2020-12-20 19:51:14 PST; 3min 22s ago Docs: https://docs.</description></item><item><title>Ubuntu20.04安装和配置MySQL5.7</title><link>https://monoya.top/linux-post/ubuntu%E4%B8%8B%E5%AE%89%E8%A3%85mysql5.7/</link><pubDate>Mon, 08 Mar 2021 00:00:00 +0000</pubDate><guid>https://monoya.top/linux-post/ubuntu%E4%B8%8B%E5%AE%89%E8%A3%85mysql5.7/</guid><description>Ubuntu换源 更新数据源 备份原来的sorce文件
sudo cp /etc/apt/sources.list /etc/apt/sources.list.old 修改sources.list文件
sudo vim /etc/apt/sources.list 选择的是清华镜像源。将sources.list内容清空，然后选择一个源粘贴到sources.list，保存退出。
# 清华镜像源 deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial main restricted universe multiverse deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial main restricted universe multiverse deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-updates main restricted universe multiverse deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-updates main restricted universe multiverse deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-backports main restricted universe multiverse deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-backports main restricted universe multiverse deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-security main restricted universe multiverse deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ xenial-security main restricted universe multiverse 更新镜像源和软件</description></item><item><title>Ubuntu安装Java</title><link>https://monoya.top/linux-post/ubuntu%E4%B8%8B%E5%AE%89%E8%A3%85java/</link><pubDate>Mon, 08 Mar 2021 00:00:00 +0000</pubDate><guid>https://monoya.top/linux-post/ubuntu%E4%B8%8B%E5%AE%89%E8%A3%85java/</guid><description>概述 此处以 JDK 1.8.0_152 为例
下载地址 http://www.oracle.com/technetwork/java/javase/downloads/index.html
解压缩并移动到指定目录 解压缩 tar -zxvf jdk-8u152-linux-x64.tar.gz 创建目录 mkdir -p /usr/local/java 移动安装包 mv jdk1.8.0_152/ /usr/local/java/ 设置所有者 chown -R root:root /usr/local/java/ 配置环境变量 配置系统环境变量 vi /etc/environment 添加如下语句 PATH=&amp;#34;/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games&amp;#34; export JAVA_HOME=/usr/local/java/jdk1.8.0_152 export JRE_HOME=/usr/local/java/jdk1.8.0_152/jre export CLASSPATH=$CLASSPATH:$JAVA_HOME/lib:$JAVA_HOME/jre/lib 配置用户环境变量 vi /etc/profile 添加如下语句 if [ &amp;#34;$PS1&amp;#34; ]; then if [ &amp;#34;$BASH&amp;#34; ] &amp;amp;&amp;amp; [ &amp;#34;$BASH&amp;#34; != &amp;#34;/bin/sh&amp;#34; ]; then # The file bash.bashrc already sets the default PS1. # PS1=&amp;#39;\h:\w\$ &amp;#39; if [ -f /etc/bash.</description></item><item><title>SpringBoot集成Druid</title><link>https://monoya.top/java-web/springboot%E9%9B%86%E6%88%90druid/</link><pubDate>Fri, 05 Mar 2021 00:00:00 +0000</pubDate><guid>https://monoya.top/java-web/springboot%E9%9B%86%E6%88%90druid/</guid><description>概述 Druid 是阿里巴巴开源平台上的一个项目，整个项目由数据库连接池、插件框架和 SQL 解析器组成。该项目主要是为了扩展 JDBC 的一些限制，可以让程序员实现一些特殊的需求，比如向密钥服务请求凭证、统计 SQL 信息、SQL 性能收集、SQL 注入检查、SQL 翻译等，程序员可以通过定制来实现自己需要的功能。
Druid 是目前最好的数据库连接池，在功能、性能、扩展性方面，都超过其他数据库连接池，包括 DBCP、C3P0、BoneCP、Proxool、JBoss DataSource。Druid 已经在阿里巴巴部署了超过 600 个应用，经过多年生产环境大规模部署的严苛考验。Druid 是阿里巴巴开发的号称为监控而生的数据库连接池！
引入依赖 在 pom.xml 文件中引入 druid-spring-boot-starter 依赖
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;com.alibaba&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;druid-spring-boot-starter&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;1.2.5&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; 引入数据库连接依赖
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;mysql&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;mysql-connector-java&amp;lt;/artifactId&amp;gt; &amp;lt;scope&amp;gt;runtime&amp;lt;/scope&amp;gt; &amp;lt;/dependency&amp;gt; 配置 application.yml 在 application.yml 中配置数据库连接
spring:datasource:druid:url:jdbc:mysql://ip:port/dbname?useUnicode=true&amp;amp;characterEncoding=utf-8&amp;amp;useSSL=falseusername:rootpassword:123456initial-size:1min-idle:1max-active:20test-on-borrow:true# MySQL 8.x: com.</description></item><item><title>SpringBoot集成MyBatis</title><link>https://monoya.top/java-web/springboot%E9%9B%86%E6%88%90mybatis/</link><pubDate>Fri, 05 Mar 2021 00:00:00 +0000</pubDate><guid>https://monoya.top/java-web/springboot%E9%9B%86%E6%88%90mybatis/</guid><description>概述 MyBatis是一个Java持久化框架，它通过XML描述符或注解把对象与存储过程或SQL语句关联起来，映射成数据库内对应的纪录。与其他对象关系映射框架不同，MyBatis没有将Java对象与数据库表关联起来，而是将Java方法与SQL语句关联。MyBatis允许用户充分利用数据库的各种功能，例如存储过程、视图、各种复杂的查询以及某数据库的专有特性。
引入依赖 在 pom.xml 文件中引入 mapper-spring-boot-starter 依赖，该依赖会自动引入 MyBaits 相关依赖
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.mybatis.spring.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;mybatis-spring-boot-starter&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;2.1.4&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; 配置 application.yml 配置 MyBatis
mybatis: type-aliases-package: com.monoya.cake.business.model # 实体类的存放路径 mapper-locations: classpath:mapper/*.xml # mapper.xml的存放路径</description></item><item><title>SpringBoot集成Swagger3.0.0</title><link>https://monoya.top/java-web/springboot%E9%9B%86%E6%88%90swagger3/</link><pubDate>Fri, 05 Mar 2021 00:00:00 +0000</pubDate><guid>https://monoya.top/java-web/springboot%E9%9B%86%E6%88%90swagger3/</guid><description>概述 Swagger 是一个规范和完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务。
总体目标是使客户端和文件系统作为服务器以同样的速度来更新。文件的方法、参数和模型紧密集成到服务器端的代码，允许 API 来始终保持同步。
3.0版本在配置上与2.9稍有差别，包括依赖包改为: springfox-boot-starter，启用注解更改为: @EnableOpenApi等。
swagger 3.0 release notes
引入依赖 在 pom.xml 文件中引入 springfox-boot-starter 依赖，该依赖会自动引入 Swagger 相关依赖
&amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;io.springfox&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;springfox-boot-starter&amp;lt;/artifactId&amp;gt; &amp;lt;version&amp;gt;3.0.0&amp;lt;/version&amp;gt; &amp;lt;/dependency&amp;gt; 自定义配置类 创建一个 Swagger3 配置类, SwaggerConfig
/** * Swagger配置类 */ @Configuration @EnableOpenApi public class SwaggerConfig { @Bean public Docket docket(){ return new Docket(DocumentationType.OAS_30) .apiInfo(apiInfo()).enable(true) .select() //apis： 添加swagger接口提取范围(contoller层包名) .apis(RequestHandlerSelectors.basePackage(&amp;#34;com.example.troller&amp;#34;)) //.apis(RequestHandlerSelectors.withMethodAnnotation(ApiOperation.class)) .paths(PathSelectors.any()) .build(); } private ApiInfo apiInfo(){ return new ApiInfoBuilder() .title(&amp;#34;XX项目接口文档&amp;#34;) .</description></item><item><title>Springboot集成FlyWay</title><link>https://monoya.top/java-web/springboot%E9%9B%86%E6%88%90flyway/</link><pubDate>Thu, 24 Dec 2020 00:00:00 +0000</pubDate><guid>https://monoya.top/java-web/springboot%E9%9B%86%E6%88%90flyway/</guid><description>依赖 在pom.xml添加maven依赖
&amp;lt;!-- mysql 依赖 --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;mysql&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;mysql-connector-java&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!-- 数据库版本管理 依赖 --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.flywaydb&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;flyway-core&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;!-- 数据库访问依赖 --&amp;gt; &amp;lt;dependency&amp;gt; &amp;lt;groupId&amp;gt;org.springframework.boot&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;spring-boot-starter-jdbc&amp;lt;/artifactId&amp;gt; &amp;lt;/dependency&amp;gt; &amp;lt;plugin&amp;gt; &amp;lt;groupId&amp;gt;org.flywaydb&amp;lt;/groupId&amp;gt; &amp;lt;artifactId&amp;gt;flyway-maven-plugin&amp;lt;/artifactId&amp;gt; &amp;lt;/plugin&amp;gt; 配置 application.yml 在application.ym文件添加Flyway配置 需要先配置数据源（连接上数据库），可以自己换成druid
# 数据源 spring: datasource: url: jdbc:mysql://127.0.0.1:3306/test?useUnicode=true&amp;amp;characterEncoding=utf8&amp;amp;zeroDateTimeBehavior=convertToNull&amp;amp;allowMultiQueries=true&amp;amp;serverTimezone=PRC&amp;amp;useSSL=false username: root password: 密码 # MySQL 8.x以下: com.mysql.jdbc.Driver driver-class-name: com.mysql.cj.jdbc.Driver --- # FLYWAY (FlywayProperties) spring: flyway: url: jdbc:mysql://127.0.0.1:3306/test?serverTimezone=UTC user: root password: 密码 baseline-on-migrate: true #在没有元数据表的情况下，针对非空Schema执行迁移时是否自动调用基线。 在resource目录下创建db/migration目录添加sql脚本 手动创建 db/migration 目录，然后在该目录下创建数据库脚本，数据库脚本的命名方式如下：
V&amp;lt;VERSION&amp;gt;__&amp;lt;NAME&amp;gt;.sql #注意：是两条下划线 #比如V1_0_0__Create_Table_User.</description></item><item><title>在阿里云Ubuntu服务器上安装Mysql</title><link>https://monoya.top/linux-post/%E5%9C%A8%E9%98%BF%E9%87%8C%E4%BA%91ubuntu%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E5%AE%89%E8%A3%85mysql/</link><pubDate>Tue, 15 Dec 2020 00:00:00 +0000</pubDate><guid>https://monoya.top/linux-post/%E5%9C%A8%E9%98%BF%E9%87%8C%E4%BA%91ubuntu%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E5%AE%89%E8%A3%85mysql/</guid><description>安装 更新数据源 apt-get update 安装 MySQL apt-get install mysql-server 查看 MySQL 版本： mysqladmin -p -u root version 解决Mysql8.0大小敏感问题 备份配置文件，卸载，删除所有数据库和MySQL相关数据。:
cp /etc/mysql/mysql.conf.d/mysqld.cnf /etc/mysql/mysql.conf.d/mysqld.cnf.backup service mysql stop apt-get --purge autoremove mysql-server rm -R /var/lib/mysql 恢复保存的配置文件，编辑文件（在[mysqld]行下增加一行）。:
cp /etc/mysql/mysql.conf.d/mysqld.cnf.backup /etc/mysql/mysql.conf.d/mysqld.cnf vim /etc/mysql/mysql.conf.d/mysqld.cnf ... lower_case_table_names=1 ... 重新安装MySQL（保留配置文件），配置其他设置:
apt-get install mysql-server service mysql start mysql_secure_installation mysql SHOW VARIABLES LIKE 'lower_case_%'; exit mysql_secure_installation 安全配置向导 运行mysql_secure_installation会执行几个设置： &amp;ndash;为root用户设置密码 &amp;ndash;删除匿名账号 &amp;ndash;取消root用户远程登录 &amp;ndash;删除test库和对test库的访问权限 &amp;ndash;刷新授权表使修改生效
为root用户设置密码 use mysql; ALTER USER root@localhost IDENTIFIED with caching_sha2_password BY 'MyPasssword'; 检查状态 systemctl status mysql.</description></item></channel></rss>